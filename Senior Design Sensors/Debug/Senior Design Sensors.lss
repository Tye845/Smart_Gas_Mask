
Senior Design Sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c0  00800100  000021ae  00002242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  008003c0  008003c0  00002502  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000358e  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001224  00000000  00000000  00005dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016eb  00000000  00000000  00006fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  000086d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f3e  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e1f  00000000  00000000  00009eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      6c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      70:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_28>
      74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      7c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      80:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      84:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      8c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      90:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      94:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      98:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      9c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	13 e0       	ldi	r17, 0x03	; 3
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	ee ea       	ldi	r30, 0xAE	; 174
     1ca:	f1 e2       	ldi	r31, 0x21	; 33
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	a0 3c       	cpi	r26, 0xC0	; 192
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	24 e0       	ldi	r18, 0x04	; 4
     1da:	a0 ec       	ldi	r26, 0xC0	; 192
     1dc:	b3 e0       	ldi	r27, 0x03	; 3
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	af 32       	cpi	r26, 0x2F	; 47
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 bb 02 	call	0x576	; 0x576 <main>
     1ec:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <uart0_putchar>:
	return 0;  
}

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart0_output;  // Link stdout to uart0_output
     1f4:	e0 ec       	ldi	r30, 0xC0	; 192
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	90 81       	ld	r25, Z
     1fa:	95 ff       	sbrs	r25, 5
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <uart0_putchar+0x4>
     1fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <uart0_init>:
     208:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     20c:	87 e6       	ldi	r24, 0x67	; 103
     20e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     212:	e1 ec       	ldi	r30, 0xC1	; 193
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 61       	ori	r24, 0x18	; 24
     21a:	80 83       	st	Z, r24
     21c:	e2 ec       	ldi	r30, 0xC2	; 194
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	86 60       	ori	r24, 0x06	; 6
     224:	80 83       	st	Z, r24
     226:	08 95       	ret

00000228 <uart1_init>:
}

// Initialize UART1
void uart1_init (void)
{
    SPCR1 &= ~(1 << SPE); // Disable SPI
     228:	ec ea       	ldi	r30, 0xAC	; 172
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8f 7b       	andi	r24, 0xBF	; 191
     230:	80 83       	st	Z, r24
	PRR0 &= ~(1 << PRUSART1); // enable usart1 in power register
     232:	e4 e6       	ldi	r30, 0x64	; 100
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	80 83       	st	Z, r24

    DDRB |= (1 << DDB3);  // Set TX1 (PB3) as output
     23c:	23 9a       	sbi	0x04, 3	; 4
    DDRB &= ~(1 << DDB4); // Set RX1 (PB4) as input
     23e:	24 98       	cbi	0x04, 4	; 4

    UBRR1H = (BAUDRATE>>8);        // shift the register right by 8 bits
     240:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = BAUDRATE;             // set baud rate
     244:	87 e6       	ldi	r24, 0x67	; 103
     246:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1B|= (1<<TXEN1) | (1<<RXEN1) | (1 << RXCIE1);  // enable receiver and transmitter
     24a:	e9 ec       	ldi	r30, 0xC9	; 201
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 69       	ori	r24, 0x98	; 152
     252:	80 83       	st	Z, r24
	UCSR1C|= (1<<UCSZ10) | (1<<UCSZ11);   // 8bit data format
     254:	ea ec       	ldi	r30, 0xCA	; 202
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	86 60       	ori	r24, 0x06	; 6
     25c:	80 83       	st	Z, r24
	UCSR1C &= ~((1 << UMSEL11) | (1 << UMSEL10)); // Clear UMSEL11 and UMSEL10 for async mode
     25e:	80 81       	ld	r24, Z
     260:	8f 73       	andi	r24, 0x3F	; 63
     262:	80 83       	st	Z, r24
     264:	08 95       	ret

00000266 <uart1_transmit>:

// Should use interrupt
void uart1_transmit(unsigned char data) 
{
	// Wait for buffer to be empty
    while (!(UCSR1A & (1<<UDRE1))); 
     266:	e8 ec       	ldi	r30, 0xC8	; 200
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	90 81       	ld	r25, Z
     26c:	95 ff       	sbrs	r25, 5
     26e:	fd cf       	rjmp	.-6      	; 0x26a <uart1_transmit+0x4>
    UDR1 = data;
     270:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     274:	08 95       	ret

00000276 <HM10_transmit>:
// Send TX to HM10 over UART1 
// Any TX to HM10 while not paired to a device will be considered as AT commands
// Once HM10 is paired to a device, any TX is considered plain text
// To go back into AT mode, send "AT"
void HM10_transmit(const char* str) 
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	ec 01       	movw	r28, r24
	printf("\nSent ");
     27c:	8e e0       	ldi	r24, 0x0E	; 14
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
    while (*str) {
     288:	88 81       	ld	r24, Y
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	88 23       	and	r24, r24
     290:	49 f0       	breq	.+18     	; 0x2a4 <HM10_transmit+0x2e>
		printf("%c", *str);
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 1e 10 	call	0x203c	; 0x203c <putchar>
        uart1_transmit(*str++);
     298:	89 91       	ld	r24, Y+
     29a:	0e 94 33 01 	call	0x266	; 0x266 <uart1_transmit>
// Once HM10 is paired to a device, any TX is considered plain text
// To go back into AT mode, send "AT"
void HM10_transmit(const char* str) 
{
	printf("\nSent ");
    while (*str) {
     29e:	88 81       	ld	r24, Y
     2a0:	81 11       	cpse	r24, r1
     2a2:	f7 cf       	rjmp	.-18     	; 0x292 <HM10_transmit+0x1c>
		printf("%c", *str);
        uart1_transmit(*str++);
    }
	printf(" to HM10\n");
     2a4:	85 e1       	ldi	r24, 0x15	; 21
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <HM10_clear_response_buffer>:

// Clear HM10 buffer
void HM10_clear_response_buffer() 
{
    memset((char*)HM10_response_buffer, 0, HM10_response_buffer_SIZE);
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	e1 ec       	ldi	r30, 0xC1	; 193
     2b6:	f3 e0       	ldi	r31, 0x03	; 3
     2b8:	df 01       	movw	r26, r30
     2ba:	1d 92       	st	X+, r1
     2bc:	8a 95       	dec	r24
     2be:	e9 f7       	brne	.-6      	; 0x2ba <HM10_clear_response_buffer+0x8>
    HM10_response_buffer_index = 0;
     2c0:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <__data_end>
     2c4:	08 95       	ret

000002c6 <HM10_print_response_buffer>:
}

// Print the response from HM10
void HM10_print_response_buffer() 
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	printf("HM10 Response: ");
     2ca:	8e e1       	ldi	r24, 0x1E	; 30
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	9f 93       	push	r25
     2d0:	8f 93       	push	r24
     2d2:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0

	// Print the HM10_response_buffer, ignoring empty indexes
    for (uint16_t i = 0; i < HM10_response_buffer_SIZE; i++) {
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
        if (HM10_response_buffer[i] != 0x00) {  
     2de:	fe 01       	movw	r30, r28
     2e0:	ef 53       	subi	r30, 0x3F	; 63
     2e2:	fc 4f       	sbci	r31, 0xFC	; 252
     2e4:	80 81       	ld	r24, Z
     2e6:	88 23       	and	r24, r24
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <HM10_print_response_buffer+0x32>
            printf("%c", HM10_response_buffer[i]); 
     2ea:	fe 01       	movw	r30, r28
     2ec:	ef 53       	subi	r30, 0x3F	; 63
     2ee:	fc 4f       	sbci	r31, 0xFC	; 252
     2f0:	80 81       	ld	r24, Z
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 1e 10 	call	0x203c	; 0x203c <putchar>
void HM10_print_response_buffer() 
{
	printf("HM10 Response: ");

	// Print the HM10_response_buffer, ignoring empty indexes
    for (uint16_t i = 0; i < HM10_response_buffer_SIZE; i++) {
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	c0 34       	cpi	r28, 0x40	; 64
     2fc:	d1 05       	cpc	r29, r1
     2fe:	79 f7       	brne	.-34     	; 0x2de <HM10_print_response_buffer+0x18>
        if (HM10_response_buffer[i] != 0x00) {  
            printf("%c", HM10_response_buffer[i]); 
        }
    }

    printf("\r\n\n"); 
     300:	88 ea       	ldi	r24, 0xA8	; 168
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <HM10_init>:

// Initialize HM10
void HM10_init()
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
	printf("Inside: HM10 Init\n");
     312:	8e e2       	ldi	r24, 0x2E	; 46
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
	HM10_transmit("AT+RENEW");
     31a:	80 e4       	ldi	r24, 0x40	; 64
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	HM10_print_response_buffer();
     322:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     326:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>
	sensirion_sleep_usec(2000000);
     32a:	60 e8       	ldi	r22, 0x80	; 128
     32c:	74 e8       	ldi	r23, 0x84	; 132
     32e:	8e e1       	ldi	r24, 0x1E	; 30
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	// Wait until HM10 responds with "OK"
	while(!(HM10_response_buffer[0] == 0x4F && HM10_response_buffer[1] == 0x4B))
     336:	c1 ec       	ldi	r28, 0xC1	; 193
     338:	d3 e0       	ldi	r29, 0x03	; 3
     33a:	0a c0       	rjmp	.+20     	; 0x350 <HM10_init+0x42>
	{
		HM10_transmit("AT+RENEW");
     33c:	80 e4       	ldi	r24, 0x40	; 64
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
		sensirion_sleep_usec(2000000);
     344:	60 e8       	ldi	r22, 0x80	; 128
     346:	74 e8       	ldi	r23, 0x84	; 132
     348:	8e e1       	ldi	r24, 0x1E	; 30
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	HM10_transmit("AT+RENEW");
	HM10_print_response_buffer();
	HM10_clear_response_buffer();
	sensirion_sleep_usec(2000000);
	// Wait until HM10 responds with "OK"
	while(!(HM10_response_buffer[0] == 0x4F && HM10_response_buffer[1] == 0x4B))
     350:	88 81       	ld	r24, Y
     352:	8f 34       	cpi	r24, 0x4F	; 79
     354:	99 f7       	brne	.-26     	; 0x33c <HM10_init+0x2e>
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	8b 34       	cpi	r24, 0x4B	; 75
     35a:	81 f7       	brne	.-32     	; 0x33c <HM10_init+0x2e>
	{
		HM10_transmit("AT+RENEW");
		sensirion_sleep_usec(2000000);
	}
	HM10_print_response_buffer();
     35c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     360:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>
	sensirion_sleep_usec(2000000);
     364:	60 e8       	ldi	r22, 0x80	; 128
     366:	74 e8       	ldi	r23, 0x84	; 132
     368:	8e e1       	ldi	r24, 0x1E	; 30
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	// HM10_transmit("AT+RESET");
	// HM10_print_response_buffer();
	// HM10_clear_response_buffer();

	// Start broadcasting
	HM10_transmit("AT+NAMEScene_Safe");
     370:	89 e4       	ldi	r24, 0x49	; 73
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	HM10_print_response_buffer();
     378:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     37c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>

	HM10_transmit("AT+ROLE0");
     380:	8b e5       	ldi	r24, 0x5B	; 91
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	sensirion_sleep_usec(2000000);
     388:	60 e8       	ldi	r22, 0x80	; 128
     38a:	74 e8       	ldi	r23, 0x84	; 132
     38c:	8e e1       	ldi	r24, 0x1E	; 30
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	HM10_print_response_buffer();
     394:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     398:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>

	HM10_transmit("AT+ROLE?");
     39c:	84 e6       	ldi	r24, 0x64	; 100
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	sensirion_sleep_usec(2000000);
     3a4:	60 e8       	ldi	r22, 0x80	; 128
     3a6:	74 e8       	ldi	r23, 0x84	; 132
     3a8:	8e e1       	ldi	r24, 0x1E	; 30
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	HM10_print_response_buffer();
     3b0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HM10_print_response_buffer>
	HM10_clear_response_buffer();
     3b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <sps30_init>:

// Initialize SPS30
void sps30_init()
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	a2 97       	sbiw	r28, 0x22	; 34
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t fw_major;
    uint8_t fw_minor;
	int16_t SPS30_command_response_code;
	
	printf("Starting sps30 probe...\n");
     3d2:	8d e6       	ldi	r24, 0x6D	; 109
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
	while (sps30_probe() != 0) {
     3da:	0a c0       	rjmp	.+20     	; 0x3f0 <sps30_init+0x32>
        printf("SPS sensor probing failed\n");
     3dc:	85 e8       	ldi	r24, 0x85	; 133
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
        sensirion_sleep_usec(1000000); /* wait 1s */
     3e4:	60 e4       	ldi	r22, 0x40	; 64
     3e6:	72 e4       	ldi	r23, 0x42	; 66
     3e8:	8f e0       	ldi	r24, 0x0F	; 15
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
	uint8_t fw_major;
    uint8_t fw_minor;
	int16_t SPS30_command_response_code;
	
	printf("Starting sps30 probe...\n");
	while (sps30_probe() != 0) {
     3f0:	0e 94 31 07 	call	0xe62	; 0xe62 <sps30_probe>
     3f4:	89 2b       	or	r24, r25
     3f6:	91 f7       	brne	.-28     	; 0x3dc <sps30_init+0x1e>
        printf("SPS sensor probing failed\n");
        sensirion_sleep_usec(1000000); /* wait 1s */
    }
    printf("SPS sensor probing successful\n");
     3f8:	8f e9       	ldi	r24, 0x9F	; 159
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 25 10 	call	0x204a	; 0x204a <puts>

    SPS30_command_response_code = sps30_read_firmware_version(&fw_major, &fw_minor);
     400:	be 01       	movw	r22, r28
     402:	6e 5f       	subi	r22, 0xFE	; 254
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 2b 06 	call	0xc56	; 0xc56 <sps30_read_firmware_version>
    if (SPS30_command_response_code) {
     40e:	89 2b       	or	r24, r25
     410:	29 f0       	breq	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
        printf("error reading firmware version\n");
     412:	8d eb       	ldi	r24, 0xBD	; 189
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
     41a:	12 c0       	rjmp	.+36     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    } 
	else {
        printf("FW: %u.%u\n", fw_major, fw_minor);
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	1f 92       	push	r1
     420:	8f 93       	push	r24
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	1f 92       	push	r1
     426:	8f 93       	push	r24
     428:	8c ed       	ldi	r24, 0xDC	; 220
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
    }

    char serial_number[SPS30_MAX_SERIAL_LEN];
    SPS30_command_response_code = sps30_get_serial(serial_number);
     440:	ce 01       	movw	r24, r28
     442:	03 96       	adiw	r24, 0x03	; 3
     444:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sps30_get_serial>
    if (SPS30_command_response_code) {
     448:	89 2b       	or	r24, r25
     44a:	29 f0       	breq	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
        printf("error reading serial number\n");
     44c:	87 ee       	ldi	r24, 0xE7	; 231
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
     454:	0e c0       	rjmp	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
    } 
	else {
        printf("Serial Number: %s\n", serial_number);
     456:	ce 01       	movw	r24, r28
     458:	03 96       	adiw	r24, 0x03	; 3
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	92 e0       	ldi	r25, 0x02	; 2
     462:	9f 93       	push	r25
     464:	8f 93       	push	r24
     466:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
    }
}
     472:	a2 96       	adiw	r28, 0x22	; 34
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <ADC_init>:

//fucntions for ADC functionality
void ADC_init(){	//initialize ADC
	ADCSRA |= (1 << ADEN);	//enables ADC and interrupt enable
     484:	ea e7       	ldi	r30, 0x7A	; 122
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	//prescales ADC (factor of 128)
     48e:	80 81       	ld	r24, Z
     490:	87 60       	ori	r24, 0x07	; 7
     492:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0);  // AVCC (5V) as reference, ADC0 selected
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	DDRC &= ~(1 << PINC0);	//setting input as PORTC pin 3
     49a:	38 98       	cbi	0x07, 0	; 7
     49c:	08 95       	ret

0000049e <ADC_Read>:
}

uint16_t ADC_Read() {
	uint16_t ADC_conversion = 0;	//16 bit integer to hold ADC conversion result
	ADCSRA |= (1<<ADSC);  // Start conversion
     49e:	ea e7       	ldi	r30, 0x7A	; 122
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	80 64       	ori	r24, 0x40	; 64
     4a6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));  // Wait for conversion to complete
     4a8:	80 81       	ld	r24, Z
     4aa:	86 fd       	sbrc	r24, 6
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <ADC_Read+0xa>
	ADC_conversion |= ADCL;	//extracting conversion from lower register
     4ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	ADC_conversion |= (ADCH << 8);	//extracting upper bits of conversion from ADCH register
     4b2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	return ADC_conversion;
     4b6:	90 e0       	ldi	r25, 0x00	; 0
}
     4b8:	92 2b       	or	r25, r18
     4ba:	08 95       	ret

000004bc <convert_ADC_to_pressure>:


float convert_ADC_to_pressure(uint16_t adc_value) {
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
	float output_voltage = (adc_value / 1023.0) * 5.0;	//using ADC conversion value to get sensor output voltage
	float pressure_reading = (output_voltage - 2.5) / 0.05;	//using pressure conversion formula to get sensor reading (page 5 of data sheet)
     4c4:	bc 01       	movw	r22, r24
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 06 0a 	call	0x140c	; 0x140c <__floatunsisf>
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 ec       	ldi	r19, 0xC0	; 192
     4d2:	4f e7       	ldi	r20, 0x7F	; 127
     4d4:	54 e4       	ldi	r21, 0x44	; 68
     4d6:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divsf3>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 ea       	ldi	r20, 0xA0	; 160
     4e0:	50 e4       	ldi	r21, 0x40	; 64
     4e2:	0e 94 bd 0a 	call	0x157a	; 0x157a <__mulsf3>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e2       	ldi	r20, 0x20	; 32
     4ec:	50 e4       	ldi	r21, 0x40	; 64
     4ee:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__subsf3>
     4f2:	2d ec       	ldi	r18, 0xCD	; 205
     4f4:	3c ec       	ldi	r19, 0xCC	; 204
     4f6:	4c e4       	ldi	r20, 0x4C	; 76
     4f8:	5d e3       	ldi	r21, 0x3D	; 61
     4fa:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divsf3>
     4fe:	6b 01       	movw	r12, r22
     500:	7c 01       	movw	r14, r24
	if(pressure_reading < -40){
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e2       	ldi	r20, 0x20	; 32
     508:	52 ec       	ldi	r21, 0xC2	; 194
     50a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	8c f4       	brge	.+34     	; 0x534 <convert_ADC_to_pressure+0x78>
		pressure_reading = -40;
		printf("Extreme Negative Pressure");
     512:	86 e1       	ldi	r24, 0x16	; 22
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0

float convert_ADC_to_pressure(uint16_t adc_value) {
	float output_voltage = (adc_value / 1023.0) * 5.0;	//using ADC conversion value to get sensor output voltage
	float pressure_reading = (output_voltage - 2.5) / 0.05;	//using pressure conversion formula to get sensor reading (page 5 of data sheet)
	if(pressure_reading < -40){
		pressure_reading = -40;
     522:	0f 2e       	mov	r0, r31
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	f0 e2       	ldi	r31, 0x20	; 32
     52a:	ef 2e       	mov	r14, r31
     52c:	f2 ec       	ldi	r31, 0xC2	; 194
     52e:	ff 2e       	mov	r15, r31
     530:	f0 2d       	mov	r31, r0
     532:	1a c0       	rjmp	.+52     	; 0x568 <convert_ADC_to_pressure+0xac>
		printf("Extreme Negative Pressure");
	}
	else if(pressure_reading > 40){
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__gesf2>
     544:	18 16       	cp	r1, r24
     546:	84 f4       	brge	.+32     	; 0x568 <convert_ADC_to_pressure+0xac>
		pressure_reading = 40;
		printf("Extreme Positive Pressure");
     548:	80 e3       	ldi	r24, 0x30	; 48
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
	if(pressure_reading < -40){
		pressure_reading = -40;
		printf("Extreme Negative Pressure");
	}
	else if(pressure_reading > 40){
		pressure_reading = 40;
     558:	0f 2e       	mov	r0, r31
     55a:	c1 2c       	mov	r12, r1
     55c:	d1 2c       	mov	r13, r1
     55e:	f0 e2       	ldi	r31, 0x20	; 32
     560:	ef 2e       	mov	r14, r31
     562:	f2 e4       	ldi	r31, 0x42	; 66
     564:	ff 2e       	mov	r15, r31
     566:	f0 2d       	mov	r31, r0
		printf("Extreme Positive Pressure");
	}
	return pressure_reading;
}
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	08 95       	ret

00000576 <main>:
volatile uint8_t HM10_response_buffer_index = 0;

struct sps30_measurement m; // Struct to store sps30 measurements

int main(void)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	d2 50       	subi	r29, 0x02	; 2
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
	uart0_init();  // Initialize UART
     58a:	0e 94 04 01 	call	0x208	; 0x208 <uart0_init>
	return 0;  
}

// Initialize printf for UART
void init_printf(void) {
	stdout = &uart0_output;  // Link stdout to uart0_output
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <__iob+0x3>
     596:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <__iob+0x2>

int main(void)
{
	uart0_init();  // Initialize UART
	init_printf();  // Initialize printf redirection
	uart1_init(); // Initalize UART 1 (HM10 Serial Connection)
     59a:	0e 94 14 01 	call	0x228	; 0x228 <uart1_init>
	sei(); // Enable global interrupts
     59e:	78 94       	sei
	sensirion_i2c_init(); // Must call or sensirion libs don't work. Currently empty. 
     5a0:	0e 94 4a 07 	call	0xe94	; 0xe94 <sensirion_i2c_init>
	sps30_init(); // Initialize SPS30
     5a4:	0e 94 df 01 	call	0x3be	; 0x3be <sps30_init>
	ADC_init();
     5a8:	0e 94 42 02 	call	0x484	; 0x484 <ADC_init>
	HM10_init(); 
     5ac:	0e 94 87 01 	call	0x30e	; 0x30e <HM10_init>

	printf("Initialization Complete!\n\n");
     5b0:	8a e4       	ldi	r24, 0x4A	; 74
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 25 10 	call	0x204a	; 0x204a <puts>

    int16_t SPS30_command_response_code = sps30_start_measurement();
     5b8:	0e 94 66 06 	call	0xccc	; 0xccc <sps30_start_measurement>
    if (SPS30_command_response_code < 0)
     5bc:	99 23       	and	r25, r25
     5be:	24 f4       	brge	.+8      	; 0x5c8 <main+0x52>
        printf("error starting measurement\n");
     5c0:	84 e6       	ldi	r24, 0x64	; 100
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 25 10 	call	0x204a	; 0x204a <puts>

    printf("measurements started\n");
     5c8:	8f e7       	ldi	r24, 0x7F	; 127
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
		// HM10_transmit(pressure_sensor_reading);
		// sprintf(pressure_sensor_reading, "Output Voltage: %.2fV", output_voltage);
		// HM10_transmit(pressure_sensor_reading);

		// Send Pressure Reading to HM10
		sprintf(pressure_sensor_reading, "Pressure: %.2fkPa", pressure_value);
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f4 e9       	ldi	r31, 0x94	; 148
     5d4:	af 2e       	mov	r10, r31
     5d6:	f2 e0       	ldi	r31, 0x02	; 2
     5d8:	bf 2e       	mov	r11, r31
     5da:	f0 2d       	mov	r31, r0
     5dc:	6e 01       	movw	r12, r28
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	c2 0e       	add	r12, r18
     5e2:	d2 1e       	adc	r13, r18
			// 				m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0, 
			// 				m.nc_0p5, m.nc_1p0, m.nc_2p5, m.nc_4p0, 
			// 				m.nc_10p0, m.typical_particle_size);

			//Commented out code above is more concise. but formatting on DSD tech app is weird so have to send each measurement individually
			sprintf(SPS30_measurements, "measured values:\n");
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	7c 01       	movw	r14, r24
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm1.0\n", m.mc_1p0);
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f7 ed       	ldi	r31, 0xD7	; 215
     5ee:	8f 2e       	mov	r8, r31
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	9f 2e       	mov	r9, r31
     5f4:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm2.5\n", m.mc_2p5);
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f3 ee       	ldi	r31, 0xE3	; 227
     5fa:	6f 2e       	mov	r6, r31
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	7f 2e       	mov	r7, r31
     600:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm4.0\n", m.mc_4p0);
     602:	0f 2e       	mov	r0, r31
     604:	ff ee       	ldi	r31, 0xEF	; 239
     606:	4f 2e       	mov	r4, r31
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	5f 2e       	mov	r5, r31
     60c:	f0 2d       	mov	r31, r0
			HM10_transmit(SPS30_measurements);  
			sprintf(SPS30_measurements, "%.2f pm10.0\n", m.mc_10p0);
     60e:	0f 2e       	mov	r0, r31
     610:	fb ef       	ldi	r31, 0xFB	; 251
     612:	2f 2e       	mov	r2, r31
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	3f 2e       	mov	r3, r31
     618:	f0 2d       	mov	r31, r0
    printf("measurements started\n");

    while (1) 
	{
		char pressure_sensor_reading[256];
		uint16_t res = ADC_Read();	// ADC conversion for pressure sensor
     61a:	0e 94 4f 02 	call	0x49e	; 0x49e <ADC_Read>
        else if(output_voltage > 4.5){
            output_voltage = 4.5;
        }
		
		// Convert ADC voltage to pressure reading
    	float pressure_value = convert_ADC_to_pressure(res);	
     61e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <convert_ADC_to_pressure>
		// HM10_transmit(pressure_sensor_reading);
		// sprintf(pressure_sensor_reading, "Output Voltage: %.2fV", output_voltage);
		// HM10_transmit(pressure_sensor_reading);

		// Send Pressure Reading to HM10
		sprintf(pressure_sensor_reading, "Pressure: %.2fkPa", pressure_value);
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	7f 93       	push	r23
     628:	6f 93       	push	r22
     62a:	bf 92       	push	r11
     62c:	af 92       	push	r10
     62e:	df 92       	push	r13
     630:	cf 92       	push	r12
     632:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
		HM10_transmit(pressure_sensor_reading);
     636:	c6 01       	movw	r24, r12
     638:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
		sprintf(pressure_sensor_reading, "\r\n\r\n");
     63c:	85 e0       	ldi	r24, 0x05	; 5
     63e:	e6 ea       	ldi	r30, 0xA6	; 166
     640:	f2 e0       	ldi	r31, 0x02	; 2
     642:	d6 01       	movw	r26, r12
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	8a 95       	dec	r24
     64a:	e1 f7       	brne	.-8      	; 0x644 <main+0xce>
		HM10_transmit(pressure_sensor_reading);
     64c:	c6 01       	movw	r24, r12
     64e:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	e3 ed       	ldi	r30, 0xD3	; 211
     656:	f0 e3       	ldi	r31, 0x30	; 48
     658:	91 50       	subi	r25, 0x01	; 1
     65a:	e0 40       	sbci	r30, 0x00	; 0
     65c:	f0 40       	sbci	r31, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0xe2>
     660:	00 c0       	rjmp	.+0      	; 0x662 <main+0xec>
     662:	00 00       	nop

		_delay_ms(1000); // 5 seconds

        sensirion_sleep_usec(SPS30_MEASUREMENT_DURATION_USEC); /* wait 1s */
     664:	60 e4       	ldi	r22, 0x40	; 64
     666:	72 e4       	ldi	r23, 0x42	; 66
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
        SPS30_command_response_code = sps30_read_measurement(&m);
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	94 e0       	ldi	r25, 0x04	; 4
     674:	0e 94 8a 06 	call	0xd14	; 0xd14 <sps30_read_measurement>
		
        if (SPS30_command_response_code < 0) 
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	99 23       	and	r25, r25
     684:	2c f4       	brge	.+10     	; 0x690 <main+0x11a>
		{
            printf("error reading measurement\n");
     686:	8b ea       	ldi	r24, 0xAB	; 171
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
     68e:	c5 cf       	rjmp	.-118    	; 0x61a <main+0xa4>
			// 				m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0, 
			// 				m.nc_0p5, m.nc_1p0, m.nc_2p5, m.nc_4p0, 
			// 				m.nc_10p0, m.typical_particle_size);

			//Commented out code above is more concise. but formatting on DSD tech app is weird so have to send each measurement individually
			sprintf(SPS30_measurements, "measured values:\n");
     690:	82 e1       	ldi	r24, 0x12	; 18
     692:	e5 ec       	ldi	r30, 0xC5	; 197
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	d7 01       	movw	r26, r14
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	8a 95       	dec	r24
     69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x122>
			HM10_transmit(SPS30_measurements);  
     6a0:	c7 01       	movw	r24, r14
     6a2:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm1.0\n", m.mc_1p0);
     6a6:	01 e0       	ldi	r16, 0x01	; 1
     6a8:	14 e0       	ldi	r17, 0x04	; 4
     6aa:	f8 01       	movw	r30, r16
     6ac:	83 81       	ldd	r24, Z+3	; 0x03
     6ae:	8f 93       	push	r24
     6b0:	82 81       	ldd	r24, Z+2	; 0x02
     6b2:	8f 93       	push	r24
     6b4:	81 81       	ldd	r24, Z+1	; 0x01
     6b6:	8f 93       	push	r24
     6b8:	80 81       	ld	r24, Z
     6ba:	8f 93       	push	r24
     6bc:	9f 92       	push	r9
     6be:	8f 92       	push	r8
     6c0:	ff 92       	push	r15
     6c2:	ef 92       	push	r14
     6c4:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     6c8:	c7 01       	movw	r24, r14
     6ca:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm2.5\n", m.mc_2p5);
     6ce:	f8 01       	movw	r30, r16
     6d0:	87 81       	ldd	r24, Z+7	; 0x07
     6d2:	8f 93       	push	r24
     6d4:	86 81       	ldd	r24, Z+6	; 0x06
     6d6:	8f 93       	push	r24
     6d8:	85 81       	ldd	r24, Z+5	; 0x05
     6da:	8f 93       	push	r24
     6dc:	84 81       	ldd	r24, Z+4	; 0x04
     6de:	8f 93       	push	r24
     6e0:	7f 92       	push	r7
     6e2:	6f 92       	push	r6
     6e4:	ff 92       	push	r15
     6e6:	ef 92       	push	r14
     6e8:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     6ec:	c7 01       	movw	r24, r14
     6ee:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm4.0\n", m.mc_4p0);
     6f2:	f8 01       	movw	r30, r16
     6f4:	83 85       	ldd	r24, Z+11	; 0x0b
     6f6:	8f 93       	push	r24
     6f8:	82 85       	ldd	r24, Z+10	; 0x0a
     6fa:	8f 93       	push	r24
     6fc:	81 85       	ldd	r24, Z+9	; 0x09
     6fe:	8f 93       	push	r24
     700:	80 85       	ldd	r24, Z+8	; 0x08
     702:	8f 93       	push	r24
     704:	5f 92       	push	r5
     706:	4f 92       	push	r4
     708:	ff 92       	push	r15
     70a:	ef 92       	push	r14
     70c:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     710:	c7 01       	movw	r24, r14
     712:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f pm10.0\n", m.mc_10p0);
     716:	f8 01       	movw	r30, r16
     718:	87 85       	ldd	r24, Z+15	; 0x0f
     71a:	8f 93       	push	r24
     71c:	86 85       	ldd	r24, Z+14	; 0x0e
     71e:	8f 93       	push	r24
     720:	85 85       	ldd	r24, Z+13	; 0x0d
     722:	8f 93       	push	r24
     724:	84 85       	ldd	r24, Z+12	; 0x0c
     726:	8f 93       	push	r24
     728:	3f 92       	push	r3
     72a:	2f 92       	push	r2
     72c:	ff 92       	push	r15
     72e:	ef 92       	push	r14
     730:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	c7 01       	movw	r24, r14
     740:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc0.5\n", m.nc_0p5);
     744:	f8 01       	movw	r30, r16
     746:	83 89       	ldd	r24, Z+19	; 0x13
     748:	8f 93       	push	r24
     74a:	82 89       	ldd	r24, Z+18	; 0x12
     74c:	8f 93       	push	r24
     74e:	81 89       	ldd	r24, Z+17	; 0x11
     750:	8f 93       	push	r24
     752:	80 89       	ldd	r24, Z+16	; 0x10
     754:	8f 93       	push	r24
     756:	28 e0       	ldi	r18, 0x08	; 8
     758:	33 e0       	ldi	r19, 0x03	; 3
     75a:	3f 93       	push	r19
     75c:	2f 93       	push	r18
     75e:	ff 92       	push	r15
     760:	ef 92       	push	r14
     762:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     766:	c7 01       	movw	r24, r14
     768:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc1.0\n", m.nc_1p0);
     76c:	f8 01       	movw	r30, r16
     76e:	87 89       	ldd	r24, Z+23	; 0x17
     770:	8f 93       	push	r24
     772:	86 89       	ldd	r24, Z+22	; 0x16
     774:	8f 93       	push	r24
     776:	85 89       	ldd	r24, Z+21	; 0x15
     778:	8f 93       	push	r24
     77a:	84 89       	ldd	r24, Z+20	; 0x14
     77c:	8f 93       	push	r24
     77e:	24 e1       	ldi	r18, 0x14	; 20
     780:	33 e0       	ldi	r19, 0x03	; 3
     782:	3f 93       	push	r19
     784:	2f 93       	push	r18
     786:	ff 92       	push	r15
     788:	ef 92       	push	r14
     78a:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     78e:	c7 01       	movw	r24, r14
     790:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc2.5\n", m.nc_2p5);
     794:	f8 01       	movw	r30, r16
     796:	83 8d       	ldd	r24, Z+27	; 0x1b
     798:	8f 93       	push	r24
     79a:	82 8d       	ldd	r24, Z+26	; 0x1a
     79c:	8f 93       	push	r24
     79e:	81 8d       	ldd	r24, Z+25	; 0x19
     7a0:	8f 93       	push	r24
     7a2:	80 8d       	ldd	r24, Z+24	; 0x18
     7a4:	8f 93       	push	r24
     7a6:	20 e2       	ldi	r18, 0x20	; 32
     7a8:	33 e0       	ldi	r19, 0x03	; 3
     7aa:	3f 93       	push	r19
     7ac:	2f 93       	push	r18
     7ae:	ff 92       	push	r15
     7b0:	ef 92       	push	r14
     7b2:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     7b6:	c7 01       	movw	r24, r14
     7b8:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc4.5\n", m.nc_4p0);
     7bc:	f8 01       	movw	r30, r16
     7be:	87 8d       	ldd	r24, Z+31	; 0x1f
     7c0:	8f 93       	push	r24
     7c2:	86 8d       	ldd	r24, Z+30	; 0x1e
     7c4:	8f 93       	push	r24
     7c6:	85 8d       	ldd	r24, Z+29	; 0x1d
     7c8:	8f 93       	push	r24
     7ca:	84 8d       	ldd	r24, Z+28	; 0x1c
     7cc:	8f 93       	push	r24
     7ce:	2c e2       	ldi	r18, 0x2C	; 44
     7d0:	33 e0       	ldi	r19, 0x03	; 3
     7d2:	3f 93       	push	r19
     7d4:	2f 93       	push	r18
     7d6:	ff 92       	push	r15
     7d8:	ef 92       	push	r14
     7da:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	c7 01       	movw	r24, r14
     7ea:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f nc10.0\n", m.nc_10p0);
     7ee:	f8 01       	movw	r30, r16
     7f0:	83 a1       	ldd	r24, Z+35	; 0x23
     7f2:	8f 93       	push	r24
     7f4:	82 a1       	ldd	r24, Z+34	; 0x22
     7f6:	8f 93       	push	r24
     7f8:	81 a1       	ldd	r24, Z+33	; 0x21
     7fa:	8f 93       	push	r24
     7fc:	80 a1       	ldd	r24, Z+32	; 0x20
     7fe:	8f 93       	push	r24
     800:	28 e3       	ldi	r18, 0x38	; 56
     802:	33 e0       	ldi	r19, 0x03	; 3
     804:	3f 93       	push	r19
     806:	2f 93       	push	r18
     808:	ff 92       	push	r15
     80a:	ef 92       	push	r14
     80c:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     810:	c7 01       	movw	r24, r14
     812:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>
			sprintf(SPS30_measurements, "%.2f typical particle size\n", m.typical_particle_size);
     816:	f8 01       	movw	r30, r16
     818:	87 a1       	ldd	r24, Z+39	; 0x27
     81a:	8f 93       	push	r24
     81c:	86 a1       	ldd	r24, Z+38	; 0x26
     81e:	8f 93       	push	r24
     820:	85 a1       	ldd	r24, Z+37	; 0x25
     822:	8f 93       	push	r24
     824:	84 a1       	ldd	r24, Z+36	; 0x24
     826:	8f 93       	push	r24
     828:	25 e4       	ldi	r18, 0x45	; 69
     82a:	33 e0       	ldi	r19, 0x03	; 3
     82c:	3f 93       	push	r19
     82e:	2f 93       	push	r18
     830:	ff 92       	push	r15
     832:	ef 92       	push	r14
     834:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			HM10_transmit(SPS30_measurements);  
     838:	c7 01       	movw	r24, r14
     83a:	0e 94 3b 01 	call	0x276	; 0x276 <HM10_transmit>

			sensirion_sleep_usec(5000000); // here specifically, sensirion_sleep_usec is the only delay that works for some reason
     83e:	60 e4       	ldi	r22, 0x40	; 64
     840:	7b e4       	ldi	r23, 0x4B	; 75
     842:	8c e4       	ldi	r24, 0x4C	; 76
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
        }
	}
     854:	e2 ce       	rjmp	.-572    	; 0x61a <main+0xa4>

00000856 <__vector_28>:
	return pressure_reading;
}

// ISR to handle USART1 rx from HM10
ISR(USART1_RX_vect) 
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	char received_char = UDR1; 
     878:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>

	// Ensure buffer does not overflow
	if (HM10_response_buffer_index < HM10_response_buffer_SIZE - 1) {  
     87c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <__data_end>
     880:	8f 33       	cpi	r24, 0x3F	; 63
     882:	60 f4       	brcc	.+24     	; 0x89c <__vector_28+0x46>
		HM10_response_buffer[HM10_response_buffer_index] = received_char;
     884:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <__data_end>
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	ef 53       	subi	r30, 0x3F	; 63
     88c:	fc 4f       	sbci	r31, 0xFC	; 252
     88e:	90 83       	st	Z, r25
		HM10_response_buffer_index++;
     890:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <__data_end>
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <__data_end>
     89a:	0a c0       	rjmp	.+20     	; 0x8b0 <__vector_28+0x5a>
	}
	else {
		printf("Buffer full, clearing...");
     89c:	81 e6       	ldi	r24, 0x61	; 97
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
		HM10_clear_response_buffer();
     8a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HM10_clear_response_buffer>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
	}
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <sensirion_bytes_to_uint32_t>:
}

int16_t sensirion_i2c_general_call_reset(void) {
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	61 81       	ldd	r22, Z+1	; 0x01
     8d8:	86 2f       	mov	r24, r22
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	a0 e0       	ldi	r26, 0x00	; 0
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	dc 01       	movw	r26, r24
     8e2:	99 27       	eor	r25, r25
     8e4:	88 27       	eor	r24, r24
     8e6:	b2 2b       	or	r27, r18
     8e8:	23 81       	ldd	r18, Z+3	; 0x03
     8ea:	82 2b       	or	r24, r18
     8ec:	22 81       	ldd	r18, Z+2	; 0x02
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	72 2b       	or	r23, r18
     8f4:	08 95       	ret

000008f6 <sensirion_bytes_to_float>:
     8f6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <sensirion_bytes_to_uint32_t>
     8fa:	08 95       	ret

000008fc <sensirion_common_generate_crc>:
     8fc:	61 15       	cp	r22, r1
     8fe:	71 05       	cpc	r23, r1
     900:	a1 f0       	breq	.+40     	; 0x92a <__stack+0x2b>
     902:	fc 01       	movw	r30, r24
     904:	68 0f       	add	r22, r24
     906:	79 1f       	adc	r23, r25
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	21 e3       	ldi	r18, 0x31	; 49
     90c:	91 91       	ld	r25, Z+
     90e:	89 27       	eor	r24, r25
     910:	98 e0       	ldi	r25, 0x08	; 8
     912:	88 23       	and	r24, r24
     914:	1c f4       	brge	.+6      	; 0x91c <__stack+0x1d>
     916:	88 0f       	add	r24, r24
     918:	82 27       	eor	r24, r18
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0x1f>
     91c:	88 0f       	add	r24, r24
     91e:	91 50       	subi	r25, 0x01	; 1
     920:	c1 f7       	brne	.-16     	; 0x912 <__stack+0x13>
     922:	e6 17       	cp	r30, r22
     924:	f7 07       	cpc	r31, r23
     926:	91 f7       	brne	.-28     	; 0x90c <__stack+0xd>
     928:	08 95       	ret
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	08 95       	ret

0000092e <sensirion_common_check_crc>:
     92e:	cf 93       	push	r28
     930:	c4 2f       	mov	r28, r20
     932:	0e 94 7e 04 	call	0x8fc	; 0x8fc <sensirion_common_generate_crc>
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	8c 13       	cpse	r24, r28
     93a:	01 c0       	rjmp	.+2      	; 0x93e <sensirion_common_check_crc+0x10>
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	89 2f       	mov	r24, r25
     940:	81 95       	neg	r24
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
     954:	78 83       	st	Y, r23
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
     956:	69 83       	std	Y+1, r22	; 0x01

    for (i = 0; i < num_args; ++i) {
     958:	22 23       	and	r18, r18
     95a:	01 f1       	breq	.+64     	; 0x99c <sensirion_fill_cmd_send_buf+0x56>
     95c:	e2 2e       	mov	r14, r18
     95e:	22 96       	adiw	r28, 0x02	; 2
     960:	04 2f       	mov	r16, r20
     962:	15 2f       	mov	r17, r21
     964:	f1 2c       	mov	r15, r1
     966:	f8 01       	movw	r30, r16
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	88 83       	st	Y, r24
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
     96c:	80 81       	ld	r24, Z
     96e:	0e 5f       	subi	r16, 0xFE	; 254
     970:	1f 4f       	sbci	r17, 0xFF	; 255
     972:	89 83       	std	Y+1, r24	; 0x01

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <sensirion_common_generate_crc>
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
     97e:	8a 83       	std	Y+2, r24	; 0x02
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);

    for (i = 0; i < num_args; ++i) {
     980:	f3 94       	inc	r15
     982:	23 96       	adiw	r28, 0x03	; 3
     984:	ef 10       	cpse	r14, r15
     986:	ef cf       	rjmp	.-34     	; 0x966 <sensirion_fill_cmd_send_buf+0x20>
     988:	ea 94       	dec	r14
     98a:	8e 2d       	mov	r24, r14
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	9c 01       	movw	r18, r24
     990:	22 0f       	add	r18, r18
     992:	33 1f       	adc	r19, r19
     994:	82 0f       	add	r24, r18
     996:	93 1f       	adc	r25, r19
     998:	05 96       	adiw	r24, 0x05	; 5
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <sensirion_fill_cmd_send_buf+0x5a>
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	90 e0       	ldi	r25, 0x00	; 0
        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    }
    return idx;
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	08 95       	ret

000009ae <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	c0 54       	subi	r28, 0x40	; 64
     9d0:	d1 09       	sbc	r29, r1
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	c6 2e       	mov	r12, r22
     9de:	d7 2e       	mov	r13, r23
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
     9e0:	4a 01       	movw	r8, r20
     9e2:	88 0c       	add	r8, r8
     9e4:	99 1c       	adc	r9, r9
     9e6:	84 0e       	add	r8, r20
     9e8:	95 1e       	adc	r9, r21
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
     9ea:	a4 01       	movw	r20, r8
     9ec:	be 01       	movw	r22, r28
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	0e 94 cd 08 	call	0x119a	; 0x119a <sensirion_i2c_read>
     9f6:	08 2f       	mov	r16, r24
     9f8:	08 2e       	mov	r0, r24
     9fa:	00 0c       	add	r0, r0
     9fc:	11 0b       	sbc	r17, r17
	
    if (ret != NO_ERROR){
     9fe:	01 15       	cp	r16, r1
     a00:	11 05       	cpc	r17, r1
     a02:	31 f4       	brne	.+12     	; 0xa10 <sensirion_i2c_read_words_as_bytes+0x62>
		printf("1)read byte error ret = %d", ret);
        return ret;
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     a04:	81 14       	cp	r8, r1
     a06:	91 04       	cpc	r9, r1
     a08:	91 f4       	brne	.+36     	; 0xa2e <sensirion_i2c_read_words_as_bytes+0x80>

        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	4a c0       	rjmp	.+148    	; 0xaa4 <sensirion_i2c_read_words_as_bytes+0xf6>
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
	
    if (ret != NO_ERROR){
		printf("1)read byte error ret = %d", ret);
     a10:	1f 93       	push	r17
     a12:	8f 93       	push	r24
     a14:	8a e7       	ldi	r24, 0x7A	; 122
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
        return ret;
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	80 2f       	mov	r24, r16
     a2a:	91 2f       	mov	r25, r17
     a2c:	3b c0       	rjmp	.+118    	; 0xaa4 <sensirion_i2c_read_words_as_bytes+0xf6>
     a2e:	8e 01       	movw	r16, r28
     a30:	0f 5f       	subi	r16, 0xFF	; 255
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	ec 2c       	mov	r14, r12
     a36:	fd 2c       	mov	r15, r13
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     a38:	c1 2c       	mov	r12, r1
     a3a:	d1 2c       	mov	r13, r1

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
                                         buf8[i + SENSIRION_WORD_SIZE]);
        if (ret != NO_ERROR){
			printf("2)read byte error ret = %d", ret);
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f5 e9       	ldi	r31, 0x95	; 149
     a40:	6f 2e       	mov	r6, r31
     a42:	f3 e0       	ldi	r31, 0x03	; 3
     a44:	7f 2e       	mov	r7, r31
     a46:	f0 2d       	mov	r31, r0
     a48:	58 01       	movw	r10, r16
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
     a4a:	f8 01       	movw	r30, r16
     a4c:	42 81       	ldd	r20, Z+2	; 0x02
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	c8 01       	movw	r24, r16
     a54:	0e 94 97 04 	call	0x92e	; 0x92e <sensirion_common_check_crc>
     a58:	28 2f       	mov	r18, r24
     a5a:	08 2e       	mov	r0, r24
     a5c:	00 0c       	add	r0, r0
     a5e:	33 0b       	sbc	r19, r19
                                         buf8[i + SENSIRION_WORD_SIZE]);
        if (ret != NO_ERROR){
     a60:	21 15       	cp	r18, r1
     a62:	31 05       	cpc	r19, r1
     a64:	51 f0       	breq	.+20     	; 0xa7a <sensirion_i2c_read_words_as_bytes+0xcc>
			printf("2)read byte error ret = %d", ret);
     a66:	3f 93       	push	r19
     a68:	8f 93       	push	r24
     a6a:	7f 92       	push	r7
     a6c:	6f 92       	push	r6
     a6e:	0e 94 08 10 	call	0x2010	; 0x2010 <printf>
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
            //return ret;
		}

        data[j++] = buf8[i];
     a7a:	f5 01       	movw	r30, r10
     a7c:	80 81       	ld	r24, Z
     a7e:	f7 01       	movw	r30, r14
     a80:	80 83       	st	Z, r24
        data[j++] = buf8[i + 1];
     a82:	f5 01       	movw	r30, r10
     a84:	81 81       	ldd	r24, Z+1	; 0x01
     a86:	f7 01       	movw	r30, r14
     a88:	81 83       	std	Z+1, r24	; 0x01
		printf("1)read byte error ret = %d", ret);
        return ret;
	}

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
     a8a:	f3 e0       	ldi	r31, 0x03	; 3
     a8c:	cf 0e       	add	r12, r31
     a8e:	d1 1c       	adc	r13, r1
     a90:	0d 5f       	subi	r16, 0xFD	; 253
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	e8 0e       	add	r14, r24
     a98:	f1 1c       	adc	r15, r1
     a9a:	c8 14       	cp	r12, r8
     a9c:	d9 04       	cpc	r13, r9
     a9e:	a0 f2       	brcs	.-88     	; 0xa48 <sensirion_i2c_read_words_as_bytes+0x9a>

        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
}
     aa4:	c0 5c       	subi	r28, 0xC0	; 192
     aa6:	df 4f       	sbci	r29, 0xFF	; 255
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	08 95       	ret

00000ad0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	8b 01       	movw	r16, r22
     ada:	ea 01       	movw	r28, r20
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
     adc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <sensirion_i2c_read_words_as_bytes>
                                            num_words);
    if (ret != NO_ERROR)
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	e1 f4       	brne	.+56     	; 0xb1c <sensirion_i2c_read_words+0x4c>
        return ret;

    for (i = 0; i < num_words; ++i) {
     ae4:	20 97       	sbiw	r28, 0x00	; 0
     ae6:	c1 f0       	breq	.+48     	; 0xb18 <sensirion_i2c_read_words+0x48>
     ae8:	e0 e0       	ldi	r30, 0x00	; 0
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	20 e0       	ldi	r18, 0x00	; 0
        word_bytes = (uint8_t*)&data_words[i];
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	e0 0f       	add	r30, r16
     af4:	f1 1f       	adc	r31, r17
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
     af6:	80 81       	ld	r24, Z
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	98 2f       	mov	r25, r24
     afc:	88 27       	eor	r24, r24
     afe:	31 81       	ldd	r19, Z+1	; 0x01
     b00:	83 2b       	or	r24, r19
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	80 83       	st	Z, r24
    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
                                            num_words);
    if (ret != NO_ERROR)
        return ret;

    for (i = 0; i < num_words; ++i) {
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	e2 2f       	mov	r30, r18
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ec 17       	cp	r30, r28
     b0e:	fd 07       	cpc	r31, r29
     b10:	70 f3       	brcs	.-36     	; 0xaee <sensirion_i2c_read_words+0x1e>
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <sensirion_i2c_read_words+0x4c>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <sensirion_i2c_write_cmd+0x8>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 a3 04 	call	0x946	; 0x946 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
     b42:	42 e0       	ldi	r20, 0x02	; 2
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	be 01       	movw	r22, r28
     b48:	6f 5f       	subi	r22, 0xFF	; 255
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	81 2f       	mov	r24, r17
     b4e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <sensirion_i2c_write>
}
     b52:	08 2e       	mov	r0, r24
     b54:	00 0c       	add	r0, r0
     b56:	99 0b       	sbc	r25, r25
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	08 95       	ret

00000b64 <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	a0 97       	sbiw	r28, 0x20	; 32
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	18 2f       	mov	r17, r24
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 a3 04 	call	0x946	; 0x946 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, buf_size);
     b84:	ac 01       	movw	r20, r24
     b86:	be 01       	movw	r22, r28
     b88:	6f 5f       	subi	r22, 0xFF	; 255
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	81 2f       	mov	r24, r17
     b8e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <sensirion_i2c_write>
}
     b92:	08 2e       	mov	r0, r24
     b94:	00 0c       	add	r0, r0
     b96:	99 0b       	sbc	r25, r25
     b98:	a0 96       	adiw	r28, 0x20	; 32
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	08 95       	ret

00000bac <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <sensirion_i2c_delayed_read_cmd+0x18>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	d8 2e       	mov	r13, r24
     bca:	49 01       	movw	r8, r18
     bcc:	5a 01       	movw	r10, r20
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 a3 04 	call	0x946	; 0x946 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	be 01       	movw	r22, r28
     be2:	6f 5f       	subi	r22, 0xFF	; 255
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	8d 2d       	mov	r24, r13
     be8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <sensirion_i2c_write>
     bec:	28 2f       	mov	r18, r24
     bee:	88 0f       	add	r24, r24
     bf0:	33 0b       	sbc	r19, r19
    if (ret != NO_ERROR)
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	79 f4       	brne	.+30     	; 0xc16 <sensirion_i2c_delayed_read_cmd+0x6a>
        return ret;

    if (delay_us)
     bf8:	81 14       	cp	r8, r1
     bfa:	91 04       	cpc	r9, r1
     bfc:	a1 04       	cpc	r10, r1
     bfe:	b1 04       	cpc	r11, r1
     c00:	21 f0       	breq	.+8      	; 0xc0a <sensirion_i2c_delayed_read_cmd+0x5e>
        sensirion_sleep_usec(delay_us);
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
     c0a:	a7 01       	movw	r20, r14
     c0c:	b8 01       	movw	r22, r16
     c0e:	8d 2d       	mov	r24, r13
     c10:	0e 94 68 05 	call	0xad0	; 0xad0 <sensirion_i2c_read_words>
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <sensirion_i2c_delayed_read_cmd+0x6e>
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
    if (ret != NO_ERROR)
        return ret;
     c16:	82 2f       	mov	r24, r18
     c18:	93 2f       	mov	r25, r19

    if (delay_us)
        sensirion_sleep_usec(delay_us);

    return sensirion_i2c_read_words(address, data_words, num_words);
}
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	08 95       	ret

00000c36 <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t* data_words, uint16_t num_words) {
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
     c3e:	79 01       	movw	r14, r18
     c40:	8a 01       	movw	r16, r20
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	0e 94 d6 05 	call	0xbac	; 0xbac <sensirion_i2c_delayed_read_cmd>
                                          num_words);
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	08 95       	ret

00000c56 <sps30_read_firmware_version>:
    if (ret)
        return ret;

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
    return 0;
}
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 d0       	rcall	.+0      	; 0xc64 <sps30_read_firmware_version+0xe>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	7c 01       	movw	r14, r24
     c6a:	8b 01       	movw	r16, r22
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	ae 01       	movw	r20, r28
     c72:	4f 5f       	subi	r20, 0xFF	; 255
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	71 ed       	ldi	r23, 0xD1	; 209
     c7a:	89 e6       	ldi	r24, 0x69	; 105
     c7c:	0e 94 1b 06 	call	0xc36	; 0xc36 <sensirion_i2c_read_cmd>
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	3a 81       	ldd	r19, Y+2	; 0x02
     c84:	f7 01       	movw	r30, r14
     c86:	30 83       	st	Z, r19
     c88:	f8 01       	movw	r30, r16
     c8a:	20 83       	st	Z, r18
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	08 95       	ret

00000c9e <sps30_get_serial>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
     ca4:	63 e3       	ldi	r22, 0x33	; 51
     ca6:	70 ed       	ldi	r23, 0xD0	; 208
     ca8:	89 e6       	ldi	r24, 0x69	; 105
     caa:	0e 94 93 05 	call	0xb26	; 0xb26 <sensirion_i2c_write_cmd>
     cae:	9c 01       	movw	r18, r24
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	41 f4       	brne	.+16     	; 0xcc4 <sps30_get_serial+0x26>
     cb4:	40 e1       	ldi	r20, 0x10	; 16
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	be 01       	movw	r22, r28
     cba:	89 e6       	ldi	r24, 0x69	; 105
     cbc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <sensirion_i2c_read_words_as_bytes>
     cc0:	1f 8e       	std	Y+31, r1	; 0x1f
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <sps30_get_serial+0x28>
     cc4:	93 2f       	mov	r25, r19
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <sps30_start_measurement>:
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <sps30_start_measurement+0xa>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	ae 01       	movw	r20, r28
     ce8:	4f 5f       	subi	r20, 0xFF	; 255
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	60 e1       	ldi	r22, 0x10	; 16
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	89 e6       	ldi	r24, 0x69	; 105
     cf2:	0e 94 b2 05 	call	0xb64	; 0xb64 <sensirion_i2c_write_cmd_with_args>
     cf6:	8c 01       	movw	r16, r24
     cf8:	60 e2       	ldi	r22, 0x20	; 32
     cfa:	7e e4       	ldi	r23, 0x4E	; 78
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
     d04:	c8 01       	movw	r24, r16
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <sps30_read_measurement>:
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	a8 97       	sbiw	r28, 0x28	; 40
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8c 01       	movw	r16, r24
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	73 e0       	ldi	r23, 0x03	; 3
     d36:	89 e6       	ldi	r24, 0x69	; 105
     d38:	0e 94 93 05 	call	0xb26	; 0xb26 <sensirion_i2c_write_cmd>
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	09 f0       	breq	.+2      	; 0xd42 <sps30_read_measurement+0x2e>
     d40:	6a c0       	rjmp	.+212    	; 0xe16 <sps30_read_measurement+0x102>
     d42:	44 e1       	ldi	r20, 0x14	; 20
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	be 01       	movw	r22, r28
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	89 e6       	ldi	r24, 0x69	; 105
     d4e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <sensirion_i2c_read_words_as_bytes>
     d52:	7c 01       	movw	r14, r24
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	09 f0       	breq	.+2      	; 0xd5a <sps30_read_measurement+0x46>
     d58:	5d c0       	rjmp	.+186    	; 0xe14 <sps30_read_measurement+0x100>
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     d62:	f8 01       	movw	r30, r16
     d64:	60 83       	st	Z, r22
     d66:	71 83       	std	Z+1, r23	; 0x01
     d68:	82 83       	std	Z+2, r24	; 0x02
     d6a:	93 83       	std	Z+3, r25	; 0x03
     d6c:	ce 01       	movw	r24, r28
     d6e:	05 96       	adiw	r24, 0x05	; 5
     d70:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     d74:	f8 01       	movw	r30, r16
     d76:	64 83       	std	Z+4, r22	; 0x04
     d78:	75 83       	std	Z+5, r23	; 0x05
     d7a:	86 83       	std	Z+6, r24	; 0x06
     d7c:	97 83       	std	Z+7, r25	; 0x07
     d7e:	ce 01       	movw	r24, r28
     d80:	09 96       	adiw	r24, 0x09	; 9
     d82:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     d86:	f8 01       	movw	r30, r16
     d88:	60 87       	std	Z+8, r22	; 0x08
     d8a:	71 87       	std	Z+9, r23	; 0x09
     d8c:	82 87       	std	Z+10, r24	; 0x0a
     d8e:	93 87       	std	Z+11, r25	; 0x0b
     d90:	ce 01       	movw	r24, r28
     d92:	0d 96       	adiw	r24, 0x0d	; 13
     d94:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     d98:	f8 01       	movw	r30, r16
     d9a:	64 87       	std	Z+12, r22	; 0x0c
     d9c:	75 87       	std	Z+13, r23	; 0x0d
     d9e:	86 87       	std	Z+14, r24	; 0x0e
     da0:	97 87       	std	Z+15, r25	; 0x0f
     da2:	ce 01       	movw	r24, r28
     da4:	41 96       	adiw	r24, 0x11	; 17
     da6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     daa:	f8 01       	movw	r30, r16
     dac:	60 8b       	std	Z+16, r22	; 0x10
     dae:	71 8b       	std	Z+17, r23	; 0x11
     db0:	82 8b       	std	Z+18, r24	; 0x12
     db2:	93 8b       	std	Z+19, r25	; 0x13
     db4:	ce 01       	movw	r24, r28
     db6:	45 96       	adiw	r24, 0x15	; 21
     db8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     dbc:	f8 01       	movw	r30, r16
     dbe:	64 8b       	std	Z+20, r22	; 0x14
     dc0:	75 8b       	std	Z+21, r23	; 0x15
     dc2:	86 8b       	std	Z+22, r24	; 0x16
     dc4:	97 8b       	std	Z+23, r25	; 0x17
     dc6:	ce 01       	movw	r24, r28
     dc8:	49 96       	adiw	r24, 0x19	; 25
     dca:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     dce:	f8 01       	movw	r30, r16
     dd0:	60 8f       	std	Z+24, r22	; 0x18
     dd2:	71 8f       	std	Z+25, r23	; 0x19
     dd4:	82 8f       	std	Z+26, r24	; 0x1a
     dd6:	93 8f       	std	Z+27, r25	; 0x1b
     dd8:	ce 01       	movw	r24, r28
     dda:	4d 96       	adiw	r24, 0x1d	; 29
     ddc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     de0:	f8 01       	movw	r30, r16
     de2:	64 8f       	std	Z+28, r22	; 0x1c
     de4:	75 8f       	std	Z+29, r23	; 0x1d
     de6:	86 8f       	std	Z+30, r24	; 0x1e
     de8:	97 8f       	std	Z+31, r25	; 0x1f
     dea:	ce 01       	movw	r24, r28
     dec:	81 96       	adiw	r24, 0x21	; 33
     dee:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     df2:	f8 01       	movw	r30, r16
     df4:	60 a3       	std	Z+32, r22	; 0x20
     df6:	71 a3       	std	Z+33, r23	; 0x21
     df8:	82 a3       	std	Z+34, r24	; 0x22
     dfa:	93 a3       	std	Z+35, r25	; 0x23
     dfc:	ce 01       	movw	r24, r28
     dfe:	85 96       	adiw	r24, 0x25	; 37
     e00:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensirion_bytes_to_float>
     e04:	f8 01       	movw	r30, r16
     e06:	64 a3       	std	Z+36, r22	; 0x24
     e08:	75 a3       	std	Z+37, r23	; 0x25
     e0a:	86 a3       	std	Z+38, r24	; 0x26
     e0c:	97 a3       	std	Z+39, r25	; 0x27
     e0e:	8e 2d       	mov	r24, r14
     e10:	9f 2d       	mov	r25, r15
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <sps30_read_measurement+0x102>
     e14:	9f 2d       	mov	r25, r15
     e16:	a8 96       	adiw	r28, 0x28	; 40
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	08 95       	ret

00000e30 <sps30_wake_up>:

int16_t sps30_wake_up(void) {
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
    int16_t ret;

    /* wake-up must be sent twice within 100ms, ignore first return value */
    (void)sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
     e34:	63 e0       	ldi	r22, 0x03	; 3
     e36:	71 e1       	ldi	r23, 0x11	; 17
     e38:	89 e6       	ldi	r24, 0x69	; 105
     e3a:	0e 94 93 05 	call	0xb26	; 0xb26 <sensirion_i2c_write_cmd>
    ret = sensirion_i2c_write_cmd(SPS30_I2C_ADDRESS, SPS_CMD_WAKE_UP);
     e3e:	63 e0       	ldi	r22, 0x03	; 3
     e40:	71 e1       	ldi	r23, 0x11	; 17
     e42:	89 e6       	ldi	r24, 0x69	; 105
     e44:	0e 94 93 05 	call	0xb26	; 0xb26 <sensirion_i2c_write_cmd>
     e48:	ec 01       	movw	r28, r24
	
    if (ret)
     e4a:	89 2b       	or	r24, r25
     e4c:	31 f4       	brne	.+12     	; 0xe5a <sps30_wake_up+0x2a>
	{
		//printf("\nret:%d\n", ret);
        return ret;
	}

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
     e4e:	68 e8       	ldi	r22, 0x88	; 136
     e50:	73 e1       	ldi	r23, 0x13	; 19
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 50 07 	call	0xea0	; 0xea0 <sensirion_sleep_usec>
    return 0;
}
     e5a:	ce 01       	movw	r24, r28
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <sps30_probe>:

const char* sps_get_driver_version(void) {
    return SPS_DRV_VERSION_STR;
}

int16_t sps30_probe(void) {
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	a0 97       	sbiw	r28, 0x20	; 32
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
    char serial[SPS30_MAX_SERIAL_LEN];

    // Try to wake up, but ignore failure if it is not in sleep mode
    (void)sps30_wake_up();
     e76:	0e 94 18 07 	call	0xe30	; 0xe30 <sps30_wake_up>

    return sps30_get_serial(serial);
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sps30_get_serial>
}
     e82:	a0 96       	adiw	r28, 0x20	; 32
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <sensirion_i2c_init>:
}

/**
 * Release all resources initialized by sensirion_i2c_init().
 */
void sensirion_i2c_release(void) {
     e94:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     e98:	89 e4       	ldi	r24, 0x49	; 73
     e9a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     e9e:	08 95       	ret

00000ea0 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
     ea0:	4f 92       	push	r4
     ea2:	5f 92       	push	r5
     ea4:	6f 92       	push	r6
     ea6:	7f 92       	push	r7
     ea8:	8f 92       	push	r8
     eaa:	9f 92       	push	r9
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	cf 93       	push	r28
    _delay_us(useconds);
     eba:	0e 94 06 0a 	call	0x140c	; 0x140c <__floatunsisf>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ec2:	2b ea       	ldi	r18, 0xAB	; 171
     ec4:	3a ea       	ldi	r19, 0xAA	; 170
     ec6:	4a ea       	ldi	r20, 0xAA	; 170
     ec8:	50 e4       	ldi	r21, 0x40	; 64
     eca:	0e 94 bd 0a 	call	0x157a	; 0x157a <__mulsf3>
     ece:	4b 01       	movw	r8, r22
     ed0:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     ede:	88 23       	and	r24, r24
     ee0:	0c f4       	brge	.+2      	; 0xee4 <sensirion_sleep_usec+0x44>
     ee2:	70 c0       	rjmp	.+224    	; 0xfc4 <sensirion_sleep_usec+0x124>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	50 e4       	ldi	r21, 0x40	; 64
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__mulsf3>
     ef4:	2b 01       	movw	r4, r22
     ef6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	3f ef       	ldi	r19, 0xFF	; 255
     efc:	4f e7       	ldi	r20, 0x7F	; 127
     efe:	57 e4       	ldi	r21, 0x47	; 71
     f00:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__gesf2>
     f04:	18 16       	cp	r1, r24
     f06:	0c f0       	brlt	.+2      	; 0xf0a <sensirion_sleep_usec+0x6a>
     f08:	45 c0       	rjmp	.+138    	; 0xf94 <sensirion_sleep_usec+0xf4>
	{
		_delay_ms(__us / 1000.0);
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a e7       	ldi	r20, 0x7A	; 122
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divsf3>
     f1a:	4b 01       	movw	r8, r22
     f1c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4a e7       	ldi	r20, 0x7A	; 122
     f24:	55 e4       	ldi	r21, 0x45	; 69
     f26:	0e 94 bd 0a 	call	0x157a	; 0x157a <__mulsf3>
     f2a:	6b 01       	movw	r12, r22
     f2c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f1       	brlt	.+74     	; 0xf88 <sensirion_sleep_usec+0xe8>
		__ticks = 1;
	else if (__tmp > 65535)
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	c7 01       	movw	r24, r14
     f48:	b6 01       	movw	r22, r12
     f4a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__gesf2>
     f4e:	18 16       	cp	r1, r24
     f50:	b4 f4       	brge	.+44     	; 0xf7e <sensirion_sleep_usec+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	51 e4       	ldi	r21, 0x41	; 65
     f5a:	c5 01       	movw	r24, r10
     f5c:	b4 01       	movw	r22, r8
     f5e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__mulsf3>
     f62:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fixunssfsi>
		while(__ticks)
     f66:	61 15       	cp	r22, r1
     f68:	71 05       	cpc	r23, r1
     f6a:	69 f1       	breq	.+90     	; 0xfc6 <sensirion_sleep_usec+0x126>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	20 e9       	ldi	r18, 0x90	; 144
     f6e:	31 e0       	ldi	r19, 0x01	; 1
     f70:	c9 01       	movw	r24, r18
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <sensirion_sleep_usec+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	61 50       	subi	r22, 0x01	; 1
     f78:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	d1 f7       	brne	.-12     	; 0xf70 <sensirion_sleep_usec+0xd0>
     f7c:	24 c0       	rjmp	.+72     	; 0xfc6 <sensirion_sleep_usec+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fixunssfsi>
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <sensirion_sleep_usec+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	cb 01       	movw	r24, r22
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <sensirion_sleep_usec+0xee>
     f92:	19 c0       	rjmp	.+50     	; 0xfc6 <sensirion_sleep_usec+0x126>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4f e7       	ldi	r20, 0x7F	; 127
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	c5 01       	movw	r24, r10
     f9e:	b4 01       	movw	r22, r8
     fa0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__gesf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	44 f4       	brge	.+16     	; 0xfb8 <sensirion_sleep_usec+0x118>
     fa8:	c3 01       	movw	r24, r6
     faa:	b2 01       	movw	r22, r4
     fac:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fixunssfsi>
     fb0:	cb 01       	movw	r24, r22
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <sensirion_sleep_usec+0x112>
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <sensirion_sleep_usec+0x12c>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fb8:	c5 01       	movw	r24, r10
     fba:	b4 01       	movw	r22, r8
     fbc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fixunssfsi>
     fc0:	c6 2f       	mov	r28, r22
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <sensirion_sleep_usec+0x126>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     fc4:	c1 e0       	ldi	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fc6:	6c 2f       	mov	r22, r28
     fc8:	6a 95       	dec	r22
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <sensirion_sleep_usec+0x128>
    //     } else {
    //         _delay_us(useconds);
    //         useconds = 0;
    //     }
    // }
}
     fcc:	cf 91       	pop	r28
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	bf 90       	pop	r11
     fd8:	af 90       	pop	r10
     fda:	9f 90       	pop	r9
     fdc:	8f 90       	pop	r8
     fde:	7f 90       	pop	r7
     fe0:	6f 90       	pop	r6
     fe2:	5f 90       	pop	r5
     fe4:	4f 90       	pop	r4
     fe6:	08 95       	ret

00000fe8 <i2c_io>:

uint8_t i2c_io(uint8_t device_addr, uint8_t *wp, uint16_t wn, uint8_t *rp, uint16_t rn)
{
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29

	status = 0;
	wrote = 0;
	send_stop = 0;

	if (wn > 0) {
     ff6:	41 15       	cp	r20, r1
     ff8:	51 05       	cpc	r21, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <i2c_io+0x16>
     ffc:	b0 c0       	rjmp	.+352    	; 0x115e <i2c_io+0x176>
		wrote = 1;
		send_stop = 1;

		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);  // Send start condition
     ffe:	94 ea       	ldi	r25, 0xA4	; 164
    1000:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    1004:	ec eb       	ldi	r30, 0xBC	; 188
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	90 81       	ld	r25, Z
    100a:	99 23       	and	r25, r25
    100c:	ec f7       	brge	.-6      	; 0x1008 <i2c_io+0x20>
		status = TWSR0 & 0xf8;
    100e:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1012:	c8 7f       	andi	r28, 0xF8	; 248
		if (status != 0x08)                 // Check that START was sent OK
    1014:	c8 30       	cpi	r28, 0x08	; 8
    1016:	31 f0       	breq	.+12     	; 0x1024 <i2c_io+0x3c>
		{
			printf("Status != 0x08\n");
    1018:	80 eb       	ldi	r24, 0xB0	; 176
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 25 10 	call	0x204a	; 0x204a <puts>
			return(status);
    1020:	8c 2f       	mov	r24, r28
    1022:	b3 c0       	rjmp	.+358    	; 0x118a <i2c_io+0x1a2>
		}

		//TWDR0 = device_addr & 0xfe;          // Load device address and R/W = 0;
		TWDR0 = device_addr << 1;
    1024:	98 2f       	mov	r25, r24
    1026:	99 0f       	add	r25, r25
    1028:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		// 01101001 & 11111110 = 01101000
		// 01101001 << 1 = 11010010
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Start transmission
    102c:	94 e8       	ldi	r25, 0x84	; 132
    102e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    1032:	ec eb       	ldi	r30, 0xBC	; 188
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	90 81       	ld	r25, Z
    1038:	99 23       	and	r25, r25
    103a:	ec f7       	brge	.-6      	; 0x1036 <i2c_io+0x4e>
		status = TWSR0 & 0xf8;
    103c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1040:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x18) {               // Check that SLA+W was sent OK
    1042:	98 31       	cpi	r25, 0x18	; 24
    1044:	09 f4       	brne	.+2      	; 0x1048 <i2c_io+0x60>
    1046:	91 c0       	rjmp	.+290    	; 0x116a <i2c_io+0x182>
			if (status == 0x20)             // Check for NAK
    1048:	90 32       	cpi	r25, 0x20	; 32
    104a:	09 f4       	brne	.+2      	; 0x104e <i2c_io+0x66>
    104c:	77 c0       	rjmp	.+238    	; 0x113c <i2c_io+0x154>
			{
				//printf("Going to nakstop\n");
				goto nakstop;
			}               // Send STOP condition
			return(status);                 // Otherwise just return the status
    104e:	89 2f       	mov	r24, r25
    1050:	9c c0       	rjmp	.+312    	; 0x118a <i2c_io+0x1a2>
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
    1052:	9d 91       	ld	r25, X+
    1054:	eb 01       	movw	r28, r22
    1056:	98 83       	st	Y, r25
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
    1058:	f0 82       	st	Z, r15
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
    105a:	90 81       	ld	r25, Z
    105c:	99 23       	and	r25, r25
    105e:	ec f7       	brge	.-6      	; 0x105a <i2c_io+0x72>
			status = TWSR0 & 0xf8;
    1060:	e6 01       	movw	r28, r12
    1062:	98 81       	ld	r25, Y
    1064:	98 7f       	andi	r25, 0xF8	; 248
			if (status != 0x28) {           // Check that data was sent OK
    1066:	98 32       	cpi	r25, 0x28	; 40
    1068:	29 f0       	breq	.+10     	; 0x1074 <i2c_io+0x8c>
				if (status == 0x30)         // Check for NAK
    106a:	90 33       	cpi	r25, 0x30	; 48
    106c:	09 f4       	brne	.+2      	; 0x1070 <i2c_io+0x88>
    106e:	66 c0       	rjmp	.+204    	; 0x113c <i2c_io+0x154>
		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
    1070:	89 2f       	mov	r24, r25
    1072:	8b c0       	rjmp	.+278    	; 0x118a <i2c_io+0x1a2>
    1074:	41 50       	subi	r20, 0x01	; 1
    1076:	51 09       	sbc	r21, r1
			}               // Send STOP condition
			return(status);                 // Otherwise just return the status
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
    1078:	61 f7       	brne	.-40     	; 0x1052 <i2c_io+0x6a>
    107a:	6b c0       	rjmp	.+214    	; 0x1152 <i2c_io+0x16a>
	if (rn > 0) {
		send_stop = 1;

		// Set the status value to check for depending on whether this is a
		// START or repeated START
		start_stat = (wrote) ? 0x10 : 0x08;
    107c:	40 e1       	ldi	r20, 0x10	; 16
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <i2c_io+0x9a>
    1080:	48 e0       	ldi	r20, 0x08	; 8

		// Put TWI into Master Receive mode by sending a START, which could
		// be a repeated START condition if we just finished writing.
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    1082:	94 ea       	ldi	r25, 0xA4	; 164
    1084:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		// Send start (or repeated start) condition
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    1088:	ec eb       	ldi	r30, 0xBC	; 188
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	90 81       	ld	r25, Z
    108e:	99 23       	and	r25, r25
    1090:	ec f7       	brge	.-6      	; 0x108c <i2c_io+0xa4>
		status = TWSR0 & 0xf8;
    1092:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1096:	98 7f       	andi	r25, 0xF8	; 248
		if (status != start_stat)           // Check that START or repeated START sent OK
    1098:	49 13       	cpse	r20, r25
    109a:	55 c0       	rjmp	.+170    	; 0x1146 <i2c_io+0x15e>
		return(status);

		//TWDR0 = device_addr  | 0x01;         // Load device address and R/W = 1;
		TWDR0 = (device_addr << 1) | 0x01;
    109c:	88 0f       	add	r24, r24
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Send address+r
    10a4:	84 e8       	ldi	r24, 0x84	; 132
    10a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    10aa:	ec eb       	ldi	r30, 0xBC	; 188
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	ec f7       	brge	.-6      	; 0x10ae <i2c_io+0xc6>
		status = TWSR0 & 0xf8;
    10b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    10b8:	98 2f       	mov	r25, r24
    10ba:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x40) {               // Check that SLA+R was sent OK
    10bc:	90 34       	cpi	r25, 0x40	; 64
    10be:	21 f0       	breq	.+8      	; 0x10c8 <i2c_io+0xe0>
			if (status == 0x48)             // Check for NAK
    10c0:	98 34       	cpi	r25, 0x48	; 72
    10c2:	e1 f1       	breq	.+120    	; 0x113c <i2c_io+0x154>
			goto nakstop;
			return(status);
    10c4:	89 2f       	mov	r24, r25
    10c6:	61 c0       	rjmp	.+194    	; 0x118a <i2c_io+0x1a2>
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
    10c8:	01 30       	cpi	r16, 0x01	; 1
    10ca:	11 05       	cpc	r17, r1
    10cc:	21 f1       	breq	.+72     	; 0x1116 <i2c_io+0x12e>
    10ce:	d9 01       	movw	r26, r18
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
    10d0:	ec eb       	ldi	r30, 0xBC	; 188
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f4 ec       	ldi	r31, 0xC4	; 196
    10d8:	ff 2e       	mov	r15, r31
    10da:	f0 2d       	mov	r31, r0
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
    10dc:	49 eb       	ldi	r20, 0xB9	; 185
    10de:	50 e0       	ldi	r21, 0x00	; 0
			if (status != 0x50)             // Check that data received OK
			return(status);
			*rp++ = TWDR0;                   // Read the data
    10e0:	6b eb       	ldi	r22, 0xBB	; 187
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	01 50       	subi	r16, 0x01	; 1
    10e6:	11 09       	sbc	r17, r1
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
    10e8:	f0 82       	st	Z, r15
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	ec f7       	brge	.-6      	; 0x10ea <i2c_io+0x102>
			status = TWSR0 & 0xf8;
    10f0:	ea 01       	movw	r28, r20
    10f2:	88 81       	ld	r24, Y
    10f4:	98 2f       	mov	r25, r24
    10f6:	98 7f       	andi	r25, 0xF8	; 248
			if (status != 0x50)             // Check that data received OK
    10f8:	90 35       	cpi	r25, 0x50	; 80
    10fa:	39 f5       	brne	.+78     	; 0x114a <i2c_io+0x162>
			return(status);
			*rp++ = TWDR0;                   // Read the data
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	eb 01       	movw	r28, r22
    1100:	88 81       	ld	r24, Y
    1102:	ed 01       	movw	r28, r26
    1104:	21 97       	sbiw	r28, 0x01	; 1
    1106:	88 83       	st	Y, r24
    1108:	cd 01       	movw	r24, r26
    110a:	80 1b       	sub	r24, r16
    110c:	91 0b       	sbc	r25, r17
			return(status);
		}

		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
    110e:	82 17       	cp	r24, r18
    1110:	93 07       	cpc	r25, r19
    1112:	51 f7       	brne	.-44     	; 0x10e8 <i2c_io+0x100>
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <i2c_io+0x130>
    1116:	d9 01       	movw	r26, r18
			return(status);
			*rp++ = TWDR0;                   // Read the data
		}

		// Read the last byte
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
    1118:	84 e8       	ldi	r24, 0x84	; 132
    111a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
    111e:	ec eb       	ldi	r30, 0xBC	; 188
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 23       	and	r24, r24
    1126:	ec f7       	brge	.-6      	; 0x1122 <i2c_io+0x13a>
		status = TWSR0 & 0xf8;
    1128:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    112c:	98 2f       	mov	r25, r24
    112e:	98 7f       	andi	r25, 0xF8	; 248
		if (status != 0x58)                 // Check that data received OK
    1130:	98 35       	cpi	r25, 0x58	; 88
    1132:	69 f4       	brne	.+26     	; 0x114e <i2c_io+0x166>
		return(status);
		*rp++ = TWDR0;                       // Read the data
    1134:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1138:	8c 93       	st	X, r24

		status = 0;                         // Set status value to successful
    113a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	nakstop:                                    // Come here to send STOP after a NAK
	if (send_stop)
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
    113c:	84 e9       	ldi	r24, 0x94	; 148
    113e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1142:	89 2f       	mov	r24, r25
    1144:	22 c0       	rjmp	.+68     	; 0x118a <i2c_io+0x1a2>
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
		// Send start (or repeated start) condition
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
		status = TWSR0 & 0xf8;
		if (status != start_stat)           // Check that START or repeated START sent OK
		return(status);
    1146:	89 2f       	mov	r24, r25
    1148:	20 c0       	rjmp	.+64     	; 0x118a <i2c_io+0x1a2>
		// Read all but the last of n bytes from the slave device in this loop
		rn--;
		while (rn-- > 0) {
			TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Read byte and send ACK
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
    114a:	89 2f       	mov	r24, r25
    114c:	1e c0       	rjmp	.+60     	; 0x118a <i2c_io+0x1a2>
		// Read the last byte
		TWCR0 = (1 << TWINT) | (1 << TWEN);  // Read last byte with NOT ACK sent
		while (!(TWCR0 & (1 << TWINT)));     // Wait for TWINT to be set
		status = TWSR0 & 0xf8;
		if (status != 0x58)                 // Check that data received OK
		return(status);
    114e:	89 2f       	mov	r24, r25
    1150:	1c c0       	rjmp	.+56     	; 0x118a <i2c_io+0x1a2>
		}

		status = 0;                         // Set status value to successful
	}

	if (rn > 0) {
    1152:	01 15       	cp	r16, r1
    1154:	11 05       	cpc	r17, r1
    1156:	09 f0       	breq	.+2      	; 0x115a <i2c_io+0x172>
    1158:	91 cf       	rjmp	.-222    	; 0x107c <i2c_io+0x94>
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	ef cf       	rjmp	.-34     	; 0x113c <i2c_io+0x154>
    115e:	01 15       	cp	r16, r1
    1160:	11 05       	cpc	r17, r1
    1162:	09 f0       	breq	.+2      	; 0x1166 <i2c_io+0x17e>
    1164:	8d cf       	rjmp	.-230    	; 0x1080 <i2c_io+0x98>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	10 c0       	rjmp	.+32     	; 0x118a <i2c_io+0x1a2>
    116a:	a6 2f       	mov	r26, r22
    116c:	b7 2f       	mov	r27, r23
			return(status);                 // Otherwise just return the status
		}

		// Write "wn" data bytes to the slave device
		while (wn-- > 0) {
			TWDR0 = *wp++;                   // Put next data byte in TWDR
    116e:	6b eb       	ldi	r22, 0xBB	; 187
    1170:	70 e0       	ldi	r23, 0x00	; 0
			TWCR0 = (1 << TWINT) | (1 << TWEN); // Start transmission
    1172:	ec eb       	ldi	r30, 0xBC	; 188
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	0f 2e       	mov	r0, r31
    1178:	f4 e8       	ldi	r31, 0x84	; 132
    117a:	ff 2e       	mov	r15, r31
    117c:	f0 2d       	mov	r31, r0
			while (!(TWCR0 & (1 << TWINT))); // Wait for TWINT to be set
			status = TWSR0 & 0xf8;
    117e:	0f 2e       	mov	r0, r31
    1180:	f9 eb       	ldi	r31, 0xB9	; 185
    1182:	cf 2e       	mov	r12, r31
    1184:	d1 2c       	mov	r13, r1
    1186:	f0 2d       	mov	r31, r0
    1188:	64 cf       	rjmp	.-312    	; 0x1052 <i2c_io+0x6a>
	nakstop:                                    // Come here to send STOP after a NAK
	if (send_stop)
		TWCR0 = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Send STOP condition
	
	return(status);
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	9b 01       	movw	r18, r22
    if(i2c_io(SPS30_ADDR, NULL, 0, data, count) != 0)
    11a0:	8a 01       	movw	r16, r20
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	89 e6       	ldi	r24, 0x69	; 105
    11ac:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <i2c_io>
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	81 11       	cpse	r24, r1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <sensirion_i2c_read+0x1e>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    	return STATUS_FAIL;
	return NO_ERROR;
}
    11b8:	89 2f       	mov	r24, r25
    11ba:	81 95       	neg	r24
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
	if(i2c_io(SPS30_ADDR, data, count, NULL, 0) != 0)
    11c6:	00 e0       	ldi	r16, 0x00	; 0
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	89 e6       	ldi	r24, 0x69	; 105
    11d0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <i2c_io>
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	81 11       	cpse	r24, r1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <sensirion_i2c_write+0x1a>
    11da:	90 e0       	ldi	r25, 0x00	; 0
    	return STATUS_FAIL;
	return NO_ERROR;
}
    11dc:	89 2f       	mov	r24, r25
    11de:	81 95       	neg	r24
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <__subsf3>:
    11e6:	50 58       	subi	r21, 0x80	; 128

000011e8 <__addsf3>:
    11e8:	bb 27       	eor	r27, r27
    11ea:	aa 27       	eor	r26, r26
    11ec:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3x>
    11f0:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_round>
    11f4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_pscA>
    11f8:	38 f0       	brcs	.+14     	; 0x1208 <__addsf3+0x20>
    11fa:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_pscB>
    11fe:	20 f0       	brcs	.+8      	; 0x1208 <__addsf3+0x20>
    1200:	39 f4       	brne	.+14     	; 0x1210 <__addsf3+0x28>
    1202:	9f 3f       	cpi	r25, 0xFF	; 255
    1204:	19 f4       	brne	.+6      	; 0x120c <__addsf3+0x24>
    1206:	26 f4       	brtc	.+8      	; 0x1210 <__addsf3+0x28>
    1208:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_nan>
    120c:	0e f4       	brtc	.+2      	; 0x1210 <__addsf3+0x28>
    120e:	e0 95       	com	r30
    1210:	e7 fb       	bst	r30, 7
    1212:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_inf>

00001216 <__addsf3x>:
    1216:	e9 2f       	mov	r30, r25
    1218:	0e 94 8f 0a 	call	0x151e	; 0x151e <__fp_split3>
    121c:	58 f3       	brcs	.-42     	; 0x11f4 <__addsf3+0xc>
    121e:	ba 17       	cp	r27, r26
    1220:	62 07       	cpc	r22, r18
    1222:	73 07       	cpc	r23, r19
    1224:	84 07       	cpc	r24, r20
    1226:	95 07       	cpc	r25, r21
    1228:	20 f0       	brcs	.+8      	; 0x1232 <__addsf3x+0x1c>
    122a:	79 f4       	brne	.+30     	; 0x124a <__addsf3x+0x34>
    122c:	a6 f5       	brtc	.+104    	; 0x1296 <__addsf3x+0x80>
    122e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_zero>
    1232:	0e f4       	brtc	.+2      	; 0x1236 <__addsf3x+0x20>
    1234:	e0 95       	com	r30
    1236:	0b 2e       	mov	r0, r27
    1238:	ba 2f       	mov	r27, r26
    123a:	a0 2d       	mov	r26, r0
    123c:	0b 01       	movw	r0, r22
    123e:	b9 01       	movw	r22, r18
    1240:	90 01       	movw	r18, r0
    1242:	0c 01       	movw	r0, r24
    1244:	ca 01       	movw	r24, r20
    1246:	a0 01       	movw	r20, r0
    1248:	11 24       	eor	r1, r1
    124a:	ff 27       	eor	r31, r31
    124c:	59 1b       	sub	r21, r25
    124e:	99 f0       	breq	.+38     	; 0x1276 <__addsf3x+0x60>
    1250:	59 3f       	cpi	r21, 0xF9	; 249
    1252:	50 f4       	brcc	.+20     	; 0x1268 <__addsf3x+0x52>
    1254:	50 3e       	cpi	r21, 0xE0	; 224
    1256:	68 f1       	brcs	.+90     	; 0x12b2 <__addsf3x+0x9c>
    1258:	1a 16       	cp	r1, r26
    125a:	f0 40       	sbci	r31, 0x00	; 0
    125c:	a2 2f       	mov	r26, r18
    125e:	23 2f       	mov	r18, r19
    1260:	34 2f       	mov	r19, r20
    1262:	44 27       	eor	r20, r20
    1264:	58 5f       	subi	r21, 0xF8	; 248
    1266:	f3 cf       	rjmp	.-26     	; 0x124e <__addsf3x+0x38>
    1268:	46 95       	lsr	r20
    126a:	37 95       	ror	r19
    126c:	27 95       	ror	r18
    126e:	a7 95       	ror	r26
    1270:	f0 40       	sbci	r31, 0x00	; 0
    1272:	53 95       	inc	r21
    1274:	c9 f7       	brne	.-14     	; 0x1268 <__addsf3x+0x52>
    1276:	7e f4       	brtc	.+30     	; 0x1296 <__addsf3x+0x80>
    1278:	1f 16       	cp	r1, r31
    127a:	ba 0b       	sbc	r27, r26
    127c:	62 0b       	sbc	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	ba f0       	brmi	.+46     	; 0x12b2 <__addsf3x+0x9c>
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	a1 f0       	breq	.+40     	; 0x12b0 <__addsf3x+0x9a>
    1288:	ff 0f       	add	r31, r31
    128a:	bb 1f       	adc	r27, r27
    128c:	66 1f       	adc	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	c2 f7       	brpl	.-16     	; 0x1284 <__addsf3x+0x6e>
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <__addsf3x+0x9c>
    1296:	ba 0f       	add	r27, r26
    1298:	62 1f       	adc	r22, r18
    129a:	73 1f       	adc	r23, r19
    129c:	84 1f       	adc	r24, r20
    129e:	48 f4       	brcc	.+18     	; 0x12b2 <__addsf3x+0x9c>
    12a0:	87 95       	ror	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b7 95       	ror	r27
    12a8:	f7 95       	ror	r31
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__addsf3x+0x9a>
    12ae:	b0 cf       	rjmp	.-160    	; 0x1210 <__addsf3+0x28>
    12b0:	93 95       	inc	r25
    12b2:	88 0f       	add	r24, r24
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <__addsf3x+0xa2>
    12b6:	99 27       	eor	r25, r25
    12b8:	ee 0f       	add	r30, r30
    12ba:	97 95       	ror	r25
    12bc:	87 95       	ror	r24
    12be:	08 95       	ret

000012c0 <__cmpsf2>:
    12c0:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_cmp>
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <__cmpsf2+0x8>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	08 95       	ret

000012ca <__divsf3>:
    12ca:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__divsf3x>
    12ce:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_round>
    12d2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_pscB>
    12d6:	58 f0       	brcs	.+22     	; 0x12ee <__divsf3+0x24>
    12d8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_pscA>
    12dc:	40 f0       	brcs	.+16     	; 0x12ee <__divsf3+0x24>
    12de:	29 f4       	brne	.+10     	; 0x12ea <__divsf3+0x20>
    12e0:	5f 3f       	cpi	r21, 0xFF	; 255
    12e2:	29 f0       	breq	.+10     	; 0x12ee <__divsf3+0x24>
    12e4:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_inf>
    12e8:	51 11       	cpse	r21, r1
    12ea:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_szero>
    12ee:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_nan>

000012f2 <__divsf3x>:
    12f2:	0e 94 8f 0a 	call	0x151e	; 0x151e <__fp_split3>
    12f6:	68 f3       	brcs	.-38     	; 0x12d2 <__divsf3+0x8>

000012f8 <__divsf3_pse>:
    12f8:	99 23       	and	r25, r25
    12fa:	b1 f3       	breq	.-20     	; 0x12e8 <__divsf3+0x1e>
    12fc:	55 23       	and	r21, r21
    12fe:	91 f3       	breq	.-28     	; 0x12e4 <__divsf3+0x1a>
    1300:	95 1b       	sub	r25, r21
    1302:	55 0b       	sbc	r21, r21
    1304:	bb 27       	eor	r27, r27
    1306:	aa 27       	eor	r26, r26
    1308:	62 17       	cp	r22, r18
    130a:	73 07       	cpc	r23, r19
    130c:	84 07       	cpc	r24, r20
    130e:	38 f0       	brcs	.+14     	; 0x131e <__divsf3_pse+0x26>
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	44 1f       	adc	r20, r20
    131a:	aa 1f       	adc	r26, r26
    131c:	a9 f3       	breq	.-22     	; 0x1308 <__divsf3_pse+0x10>
    131e:	35 d0       	rcall	.+106    	; 0x138a <__divsf3_pse+0x92>
    1320:	0e 2e       	mov	r0, r30
    1322:	3a f0       	brmi	.+14     	; 0x1332 <__divsf3_pse+0x3a>
    1324:	e0 e8       	ldi	r30, 0x80	; 128
    1326:	32 d0       	rcall	.+100    	; 0x138c <__divsf3_pse+0x94>
    1328:	91 50       	subi	r25, 0x01	; 1
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	e6 95       	lsr	r30
    132e:	00 1c       	adc	r0, r0
    1330:	ca f7       	brpl	.-14     	; 0x1324 <__divsf3_pse+0x2c>
    1332:	2b d0       	rcall	.+86     	; 0x138a <__divsf3_pse+0x92>
    1334:	fe 2f       	mov	r31, r30
    1336:	29 d0       	rcall	.+82     	; 0x138a <__divsf3_pse+0x92>
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	bb 1f       	adc	r27, r27
    1340:	26 17       	cp	r18, r22
    1342:	37 07       	cpc	r19, r23
    1344:	48 07       	cpc	r20, r24
    1346:	ab 07       	cpc	r26, r27
    1348:	b0 e8       	ldi	r27, 0x80	; 128
    134a:	09 f0       	breq	.+2      	; 0x134e <__divsf3_pse+0x56>
    134c:	bb 0b       	sbc	r27, r27
    134e:	80 2d       	mov	r24, r0
    1350:	bf 01       	movw	r22, r30
    1352:	ff 27       	eor	r31, r31
    1354:	93 58       	subi	r25, 0x83	; 131
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	3a f0       	brmi	.+14     	; 0x1368 <__divsf3_pse+0x70>
    135a:	9e 3f       	cpi	r25, 0xFE	; 254
    135c:	51 05       	cpc	r21, r1
    135e:	78 f0       	brcs	.+30     	; 0x137e <__divsf3_pse+0x86>
    1360:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_inf>
    1364:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_szero>
    1368:	5f 3f       	cpi	r21, 0xFF	; 255
    136a:	e4 f3       	brlt	.-8      	; 0x1364 <__divsf3_pse+0x6c>
    136c:	98 3e       	cpi	r25, 0xE8	; 232
    136e:	d4 f3       	brlt	.-12     	; 0x1364 <__divsf3_pse+0x6c>
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b7 95       	ror	r27
    1378:	f7 95       	ror	r31
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__divsf3_pse+0x78>
    137e:	88 0f       	add	r24, r24
    1380:	91 1d       	adc	r25, r1
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	97 f9       	bld	r25, 7
    1388:	08 95       	ret
    138a:	e1 e0       	ldi	r30, 0x01	; 1
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	bb 1f       	adc	r27, r27
    1394:	62 17       	cp	r22, r18
    1396:	73 07       	cpc	r23, r19
    1398:	84 07       	cpc	r24, r20
    139a:	ba 07       	cpc	r27, r26
    139c:	20 f0       	brcs	.+8      	; 0x13a6 <__divsf3_pse+0xae>
    139e:	62 1b       	sub	r22, r18
    13a0:	73 0b       	sbc	r23, r19
    13a2:	84 0b       	sbc	r24, r20
    13a4:	ba 0b       	sbc	r27, r26
    13a6:	ee 1f       	adc	r30, r30
    13a8:	88 f7       	brcc	.-30     	; 0x138c <__divsf3_pse+0x94>
    13aa:	e0 95       	com	r30
    13ac:	08 95       	ret

000013ae <__fixunssfsi>:
    13ae:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_splitA>
    13b2:	88 f0       	brcs	.+34     	; 0x13d6 <__fixunssfsi+0x28>
    13b4:	9f 57       	subi	r25, 0x7F	; 127
    13b6:	98 f0       	brcs	.+38     	; 0x13de <__fixunssfsi+0x30>
    13b8:	b9 2f       	mov	r27, r25
    13ba:	99 27       	eor	r25, r25
    13bc:	b7 51       	subi	r27, 0x17	; 23
    13be:	b0 f0       	brcs	.+44     	; 0x13ec <__fixunssfsi+0x3e>
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <__fixunssfsi+0x4c>
    13c2:	66 0f       	add	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	88 1f       	adc	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	1a f0       	brmi	.+6      	; 0x13d2 <__fixunssfsi+0x24>
    13cc:	ba 95       	dec	r27
    13ce:	c9 f7       	brne	.-14     	; 0x13c2 <__fixunssfsi+0x14>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <__fixunssfsi+0x4c>
    13d2:	b1 30       	cpi	r27, 0x01	; 1
    13d4:	91 f0       	breq	.+36     	; 0x13fa <__fixunssfsi+0x4c>
    13d6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_zero>
    13da:	b1 e0       	ldi	r27, 0x01	; 1
    13dc:	08 95       	ret
    13de:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_zero>
    13e2:	67 2f       	mov	r22, r23
    13e4:	78 2f       	mov	r23, r24
    13e6:	88 27       	eor	r24, r24
    13e8:	b8 5f       	subi	r27, 0xF8	; 248
    13ea:	39 f0       	breq	.+14     	; 0x13fa <__fixunssfsi+0x4c>
    13ec:	b9 3f       	cpi	r27, 0xF9	; 249
    13ee:	cc f3       	brlt	.-14     	; 0x13e2 <__fixunssfsi+0x34>
    13f0:	86 95       	lsr	r24
    13f2:	77 95       	ror	r23
    13f4:	67 95       	ror	r22
    13f6:	b3 95       	inc	r27
    13f8:	d9 f7       	brne	.-10     	; 0x13f0 <__fixunssfsi+0x42>
    13fa:	3e f4       	brtc	.+14     	; 0x140a <__fixunssfsi+0x5c>
    13fc:	90 95       	com	r25
    13fe:	80 95       	com	r24
    1400:	70 95       	com	r23
    1402:	61 95       	neg	r22
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__floatunsisf>:
    140c:	e8 94       	clt
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <__floatsisf+0x12>

00001410 <__floatsisf>:
    1410:	97 fb       	bst	r25, 7
    1412:	3e f4       	brtc	.+14     	; 0x1422 <__floatsisf+0x12>
    1414:	90 95       	com	r25
    1416:	80 95       	com	r24
    1418:	70 95       	com	r23
    141a:	61 95       	neg	r22
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	8f 4f       	sbci	r24, 0xFF	; 255
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	99 23       	and	r25, r25
    1424:	a9 f0       	breq	.+42     	; 0x1450 <__floatsisf+0x40>
    1426:	f9 2f       	mov	r31, r25
    1428:	96 e9       	ldi	r25, 0x96	; 150
    142a:	bb 27       	eor	r27, r27
    142c:	93 95       	inc	r25
    142e:	f6 95       	lsr	r31
    1430:	87 95       	ror	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	b7 95       	ror	r27
    1438:	f1 11       	cpse	r31, r1
    143a:	f8 cf       	rjmp	.-16     	; 0x142c <__floatsisf+0x1c>
    143c:	fa f4       	brpl	.+62     	; 0x147c <__floatsisf+0x6c>
    143e:	bb 0f       	add	r27, r27
    1440:	11 f4       	brne	.+4      	; 0x1446 <__floatsisf+0x36>
    1442:	60 ff       	sbrs	r22, 0
    1444:	1b c0       	rjmp	.+54     	; 0x147c <__floatsisf+0x6c>
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	8f 4f       	sbci	r24, 0xFF	; 255
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	16 c0       	rjmp	.+44     	; 0x147c <__floatsisf+0x6c>
    1450:	88 23       	and	r24, r24
    1452:	11 f0       	breq	.+4      	; 0x1458 <__floatsisf+0x48>
    1454:	96 e9       	ldi	r25, 0x96	; 150
    1456:	11 c0       	rjmp	.+34     	; 0x147a <__floatsisf+0x6a>
    1458:	77 23       	and	r23, r23
    145a:	21 f0       	breq	.+8      	; 0x1464 <__floatsisf+0x54>
    145c:	9e e8       	ldi	r25, 0x8E	; 142
    145e:	87 2f       	mov	r24, r23
    1460:	76 2f       	mov	r23, r22
    1462:	05 c0       	rjmp	.+10     	; 0x146e <__floatsisf+0x5e>
    1464:	66 23       	and	r22, r22
    1466:	71 f0       	breq	.+28     	; 0x1484 <__floatsisf+0x74>
    1468:	96 e8       	ldi	r25, 0x86	; 134
    146a:	86 2f       	mov	r24, r22
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	2a f0       	brmi	.+10     	; 0x147c <__floatsisf+0x6c>
    1472:	9a 95       	dec	r25
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	88 1f       	adc	r24, r24
    147a:	da f7       	brpl	.-10     	; 0x1472 <__floatsisf+0x62>
    147c:	88 0f       	add	r24, r24
    147e:	96 95       	lsr	r25
    1480:	87 95       	ror	r24
    1482:	97 f9       	bld	r25, 7
    1484:	08 95       	ret

00001486 <__fp_cmp>:
    1486:	99 0f       	add	r25, r25
    1488:	00 08       	sbc	r0, r0
    148a:	55 0f       	add	r21, r21
    148c:	aa 0b       	sbc	r26, r26
    148e:	e0 e8       	ldi	r30, 0x80	; 128
    1490:	fe ef       	ldi	r31, 0xFE	; 254
    1492:	16 16       	cp	r1, r22
    1494:	17 06       	cpc	r1, r23
    1496:	e8 07       	cpc	r30, r24
    1498:	f9 07       	cpc	r31, r25
    149a:	c0 f0       	brcs	.+48     	; 0x14cc <__fp_cmp+0x46>
    149c:	12 16       	cp	r1, r18
    149e:	13 06       	cpc	r1, r19
    14a0:	e4 07       	cpc	r30, r20
    14a2:	f5 07       	cpc	r31, r21
    14a4:	98 f0       	brcs	.+38     	; 0x14cc <__fp_cmp+0x46>
    14a6:	62 1b       	sub	r22, r18
    14a8:	73 0b       	sbc	r23, r19
    14aa:	84 0b       	sbc	r24, r20
    14ac:	95 0b       	sbc	r25, r21
    14ae:	39 f4       	brne	.+14     	; 0x14be <__fp_cmp+0x38>
    14b0:	0a 26       	eor	r0, r26
    14b2:	61 f0       	breq	.+24     	; 0x14cc <__fp_cmp+0x46>
    14b4:	23 2b       	or	r18, r19
    14b6:	24 2b       	or	r18, r20
    14b8:	25 2b       	or	r18, r21
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <__fp_cmp+0x3e>
    14bc:	08 95       	ret
    14be:	0a 26       	eor	r0, r26
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__fp_cmp+0x3e>
    14c2:	a1 40       	sbci	r26, 0x01	; 1
    14c4:	a6 95       	lsr	r26
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	81 1d       	adc	r24, r1
    14ca:	81 1d       	adc	r24, r1
    14cc:	08 95       	ret

000014ce <__fp_inf>:
    14ce:	97 f9       	bld	r25, 7
    14d0:	9f 67       	ori	r25, 0x7F	; 127
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	08 95       	ret

000014da <__fp_nan>:
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	80 ec       	ldi	r24, 0xC0	; 192
    14de:	08 95       	ret

000014e0 <__fp_pscA>:
    14e0:	00 24       	eor	r0, r0
    14e2:	0a 94       	dec	r0
    14e4:	16 16       	cp	r1, r22
    14e6:	17 06       	cpc	r1, r23
    14e8:	18 06       	cpc	r1, r24
    14ea:	09 06       	cpc	r0, r25
    14ec:	08 95       	ret

000014ee <__fp_pscB>:
    14ee:	00 24       	eor	r0, r0
    14f0:	0a 94       	dec	r0
    14f2:	12 16       	cp	r1, r18
    14f4:	13 06       	cpc	r1, r19
    14f6:	14 06       	cpc	r1, r20
    14f8:	05 06       	cpc	r0, r21
    14fa:	08 95       	ret

000014fc <__fp_round>:
    14fc:	09 2e       	mov	r0, r25
    14fe:	03 94       	inc	r0
    1500:	00 0c       	add	r0, r0
    1502:	11 f4       	brne	.+4      	; 0x1508 <__fp_round+0xc>
    1504:	88 23       	and	r24, r24
    1506:	52 f0       	brmi	.+20     	; 0x151c <__fp_round+0x20>
    1508:	bb 0f       	add	r27, r27
    150a:	40 f4       	brcc	.+16     	; 0x151c <__fp_round+0x20>
    150c:	bf 2b       	or	r27, r31
    150e:	11 f4       	brne	.+4      	; 0x1514 <__fp_round+0x18>
    1510:	60 ff       	sbrs	r22, 0
    1512:	04 c0       	rjmp	.+8      	; 0x151c <__fp_round+0x20>
    1514:	6f 5f       	subi	r22, 0xFF	; 255
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	08 95       	ret

0000151e <__fp_split3>:
    151e:	57 fd       	sbrc	r21, 7
    1520:	90 58       	subi	r25, 0x80	; 128
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	59 f0       	breq	.+22     	; 0x153e <__fp_splitA+0x10>
    1528:	5f 3f       	cpi	r21, 0xFF	; 255
    152a:	71 f0       	breq	.+28     	; 0x1548 <__fp_splitA+0x1a>
    152c:	47 95       	ror	r20

0000152e <__fp_splitA>:
    152e:	88 0f       	add	r24, r24
    1530:	97 fb       	bst	r25, 7
    1532:	99 1f       	adc	r25, r25
    1534:	61 f0       	breq	.+24     	; 0x154e <__fp_splitA+0x20>
    1536:	9f 3f       	cpi	r25, 0xFF	; 255
    1538:	79 f0       	breq	.+30     	; 0x1558 <__fp_splitA+0x2a>
    153a:	87 95       	ror	r24
    153c:	08 95       	ret
    153e:	12 16       	cp	r1, r18
    1540:	13 06       	cpc	r1, r19
    1542:	14 06       	cpc	r1, r20
    1544:	55 1f       	adc	r21, r21
    1546:	f2 cf       	rjmp	.-28     	; 0x152c <__fp_split3+0xe>
    1548:	46 95       	lsr	r20
    154a:	f1 df       	rcall	.-30     	; 0x152e <__fp_splitA>
    154c:	08 c0       	rjmp	.+16     	; 0x155e <__fp_splitA+0x30>
    154e:	16 16       	cp	r1, r22
    1550:	17 06       	cpc	r1, r23
    1552:	18 06       	cpc	r1, r24
    1554:	99 1f       	adc	r25, r25
    1556:	f1 cf       	rjmp	.-30     	; 0x153a <__fp_splitA+0xc>
    1558:	86 95       	lsr	r24
    155a:	71 05       	cpc	r23, r1
    155c:	61 05       	cpc	r22, r1
    155e:	08 94       	sec
    1560:	08 95       	ret

00001562 <__fp_zero>:
    1562:	e8 94       	clt

00001564 <__fp_szero>:
    1564:	bb 27       	eor	r27, r27
    1566:	66 27       	eor	r22, r22
    1568:	77 27       	eor	r23, r23
    156a:	cb 01       	movw	r24, r22
    156c:	97 f9       	bld	r25, 7
    156e:	08 95       	ret

00001570 <__gesf2>:
    1570:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_cmp>
    1574:	08 f4       	brcc	.+2      	; 0x1578 <__gesf2+0x8>
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__mulsf3>:
    157a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__mulsf3x>
    157e:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_round>
    1582:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_pscA>
    1586:	38 f0       	brcs	.+14     	; 0x1596 <__mulsf3+0x1c>
    1588:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_pscB>
    158c:	20 f0       	brcs	.+8      	; 0x1596 <__mulsf3+0x1c>
    158e:	95 23       	and	r25, r21
    1590:	11 f0       	breq	.+4      	; 0x1596 <__mulsf3+0x1c>
    1592:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_inf>
    1596:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_nan>
    159a:	11 24       	eor	r1, r1
    159c:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_szero>

000015a0 <__mulsf3x>:
    15a0:	0e 94 8f 0a 	call	0x151e	; 0x151e <__fp_split3>
    15a4:	70 f3       	brcs	.-36     	; 0x1582 <__mulsf3+0x8>

000015a6 <__mulsf3_pse>:
    15a6:	95 9f       	mul	r25, r21
    15a8:	c1 f3       	breq	.-16     	; 0x159a <__mulsf3+0x20>
    15aa:	95 0f       	add	r25, r21
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	55 1f       	adc	r21, r21
    15b0:	62 9f       	mul	r22, r18
    15b2:	f0 01       	movw	r30, r0
    15b4:	72 9f       	mul	r23, r18
    15b6:	bb 27       	eor	r27, r27
    15b8:	f0 0d       	add	r31, r0
    15ba:	b1 1d       	adc	r27, r1
    15bc:	63 9f       	mul	r22, r19
    15be:	aa 27       	eor	r26, r26
    15c0:	f0 0d       	add	r31, r0
    15c2:	b1 1d       	adc	r27, r1
    15c4:	aa 1f       	adc	r26, r26
    15c6:	64 9f       	mul	r22, r20
    15c8:	66 27       	eor	r22, r22
    15ca:	b0 0d       	add	r27, r0
    15cc:	a1 1d       	adc	r26, r1
    15ce:	66 1f       	adc	r22, r22
    15d0:	82 9f       	mul	r24, r18
    15d2:	22 27       	eor	r18, r18
    15d4:	b0 0d       	add	r27, r0
    15d6:	a1 1d       	adc	r26, r1
    15d8:	62 1f       	adc	r22, r18
    15da:	73 9f       	mul	r23, r19
    15dc:	b0 0d       	add	r27, r0
    15de:	a1 1d       	adc	r26, r1
    15e0:	62 1f       	adc	r22, r18
    15e2:	83 9f       	mul	r24, r19
    15e4:	a0 0d       	add	r26, r0
    15e6:	61 1d       	adc	r22, r1
    15e8:	22 1f       	adc	r18, r18
    15ea:	74 9f       	mul	r23, r20
    15ec:	33 27       	eor	r19, r19
    15ee:	a0 0d       	add	r26, r0
    15f0:	61 1d       	adc	r22, r1
    15f2:	23 1f       	adc	r18, r19
    15f4:	84 9f       	mul	r24, r20
    15f6:	60 0d       	add	r22, r0
    15f8:	21 1d       	adc	r18, r1
    15fa:	82 2f       	mov	r24, r18
    15fc:	76 2f       	mov	r23, r22
    15fe:	6a 2f       	mov	r22, r26
    1600:	11 24       	eor	r1, r1
    1602:	9f 57       	subi	r25, 0x7F	; 127
    1604:	50 40       	sbci	r21, 0x00	; 0
    1606:	9a f0       	brmi	.+38     	; 0x162e <__mulsf3_pse+0x88>
    1608:	f1 f0       	breq	.+60     	; 0x1646 <__mulsf3_pse+0xa0>
    160a:	88 23       	and	r24, r24
    160c:	4a f0       	brmi	.+18     	; 0x1620 <__mulsf3_pse+0x7a>
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	bb 1f       	adc	r27, r27
    1614:	66 1f       	adc	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	91 50       	subi	r25, 0x01	; 1
    161c:	50 40       	sbci	r21, 0x00	; 0
    161e:	a9 f7       	brne	.-22     	; 0x160a <__mulsf3_pse+0x64>
    1620:	9e 3f       	cpi	r25, 0xFE	; 254
    1622:	51 05       	cpc	r21, r1
    1624:	80 f0       	brcs	.+32     	; 0x1646 <__mulsf3_pse+0xa0>
    1626:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__fp_inf>
    162a:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_szero>
    162e:	5f 3f       	cpi	r21, 0xFF	; 255
    1630:	e4 f3       	brlt	.-8      	; 0x162a <__mulsf3_pse+0x84>
    1632:	98 3e       	cpi	r25, 0xE8	; 232
    1634:	d4 f3       	brlt	.-12     	; 0x162a <__mulsf3_pse+0x84>
    1636:	86 95       	lsr	r24
    1638:	77 95       	ror	r23
    163a:	67 95       	ror	r22
    163c:	b7 95       	ror	r27
    163e:	f7 95       	ror	r31
    1640:	e7 95       	ror	r30
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	c1 f7       	brne	.-16     	; 0x1636 <__mulsf3_pse+0x90>
    1646:	fe 2b       	or	r31, r30
    1648:	88 0f       	add	r24, r24
    164a:	91 1d       	adc	r25, r1
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <vfprintf>:
    1654:	a0 e1       	ldi	r26, 0x10	; 16
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	fb e0       	ldi	r31, 0x0B	; 11
    165c:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__prologue_saves__>
    1660:	7c 01       	movw	r14, r24
    1662:	1b 01       	movw	r2, r22
    1664:	6a 01       	movw	r12, r20
    1666:	fc 01       	movw	r30, r24
    1668:	17 82       	std	Z+7, r1	; 0x07
    166a:	16 82       	std	Z+6, r1	; 0x06
    166c:	83 81       	ldd	r24, Z+3	; 0x03
    166e:	81 ff       	sbrs	r24, 1
    1670:	44 c3       	rjmp	.+1672   	; 0x1cfa <vfprintf+0x6a6>
    1672:	9e 01       	movw	r18, r28
    1674:	2f 5f       	subi	r18, 0xFF	; 255
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	39 01       	movw	r6, r18
    167a:	f7 01       	movw	r30, r14
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	f1 01       	movw	r30, r2
    1680:	93 fd       	sbrc	r25, 3
    1682:	85 91       	lpm	r24, Z+
    1684:	93 ff       	sbrs	r25, 3
    1686:	81 91       	ld	r24, Z+
    1688:	1f 01       	movw	r2, r30
    168a:	88 23       	and	r24, r24
    168c:	09 f4       	brne	.+2      	; 0x1690 <vfprintf+0x3c>
    168e:	31 c3       	rjmp	.+1634   	; 0x1cf2 <vfprintf+0x69e>
    1690:	85 32       	cpi	r24, 0x25	; 37
    1692:	39 f4       	brne	.+14     	; 0x16a2 <vfprintf+0x4e>
    1694:	93 fd       	sbrc	r25, 3
    1696:	85 91       	lpm	r24, Z+
    1698:	93 ff       	sbrs	r25, 3
    169a:	81 91       	ld	r24, Z+
    169c:	1f 01       	movw	r2, r30
    169e:	85 32       	cpi	r24, 0x25	; 37
    16a0:	39 f4       	brne	.+14     	; 0x16b0 <vfprintf+0x5c>
    16a2:	b7 01       	movw	r22, r14
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    16aa:	56 01       	movw	r10, r12
    16ac:	65 01       	movw	r12, r10
    16ae:	e5 cf       	rjmp	.-54     	; 0x167a <vfprintf+0x26>
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	51 2c       	mov	r5, r1
    16b4:	91 2c       	mov	r9, r1
    16b6:	ff e1       	ldi	r31, 0x1F	; 31
    16b8:	f9 15       	cp	r31, r9
    16ba:	d8 f0       	brcs	.+54     	; 0x16f2 <vfprintf+0x9e>
    16bc:	8b 32       	cpi	r24, 0x2B	; 43
    16be:	79 f0       	breq	.+30     	; 0x16de <vfprintf+0x8a>
    16c0:	38 f4       	brcc	.+14     	; 0x16d0 <vfprintf+0x7c>
    16c2:	80 32       	cpi	r24, 0x20	; 32
    16c4:	79 f0       	breq	.+30     	; 0x16e4 <vfprintf+0x90>
    16c6:	83 32       	cpi	r24, 0x23	; 35
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <vfprintf+0x9e>
    16ca:	f9 2d       	mov	r31, r9
    16cc:	f0 61       	ori	r31, 0x10	; 16
    16ce:	2e c0       	rjmp	.+92     	; 0x172c <vfprintf+0xd8>
    16d0:	8d 32       	cpi	r24, 0x2D	; 45
    16d2:	61 f0       	breq	.+24     	; 0x16ec <vfprintf+0x98>
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	69 f4       	brne	.+26     	; 0x16f2 <vfprintf+0x9e>
    16d8:	29 2d       	mov	r18, r9
    16da:	21 60       	ori	r18, 0x01	; 1
    16dc:	2d c0       	rjmp	.+90     	; 0x1738 <vfprintf+0xe4>
    16de:	39 2d       	mov	r19, r9
    16e0:	32 60       	ori	r19, 0x02	; 2
    16e2:	93 2e       	mov	r9, r19
    16e4:	89 2d       	mov	r24, r9
    16e6:	84 60       	ori	r24, 0x04	; 4
    16e8:	98 2e       	mov	r9, r24
    16ea:	2a c0       	rjmp	.+84     	; 0x1740 <vfprintf+0xec>
    16ec:	e9 2d       	mov	r30, r9
    16ee:	e8 60       	ori	r30, 0x08	; 8
    16f0:	15 c0       	rjmp	.+42     	; 0x171c <vfprintf+0xc8>
    16f2:	97 fc       	sbrc	r9, 7
    16f4:	2d c0       	rjmp	.+90     	; 0x1750 <vfprintf+0xfc>
    16f6:	20 ed       	ldi	r18, 0xD0	; 208
    16f8:	28 0f       	add	r18, r24
    16fa:	2a 30       	cpi	r18, 0x0A	; 10
    16fc:	88 f4       	brcc	.+34     	; 0x1720 <vfprintf+0xcc>
    16fe:	96 fe       	sbrs	r9, 6
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0xba>
    1702:	3a e0       	ldi	r19, 0x0A	; 10
    1704:	13 9f       	mul	r17, r19
    1706:	20 0d       	add	r18, r0
    1708:	11 24       	eor	r1, r1
    170a:	12 2f       	mov	r17, r18
    170c:	19 c0       	rjmp	.+50     	; 0x1740 <vfprintf+0xec>
    170e:	8a e0       	ldi	r24, 0x0A	; 10
    1710:	58 9e       	mul	r5, r24
    1712:	20 0d       	add	r18, r0
    1714:	11 24       	eor	r1, r1
    1716:	52 2e       	mov	r5, r18
    1718:	e9 2d       	mov	r30, r9
    171a:	e0 62       	ori	r30, 0x20	; 32
    171c:	9e 2e       	mov	r9, r30
    171e:	10 c0       	rjmp	.+32     	; 0x1740 <vfprintf+0xec>
    1720:	8e 32       	cpi	r24, 0x2E	; 46
    1722:	31 f4       	brne	.+12     	; 0x1730 <vfprintf+0xdc>
    1724:	96 fc       	sbrc	r9, 6
    1726:	e5 c2       	rjmp	.+1482   	; 0x1cf2 <vfprintf+0x69e>
    1728:	f9 2d       	mov	r31, r9
    172a:	f0 64       	ori	r31, 0x40	; 64
    172c:	9f 2e       	mov	r9, r31
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <vfprintf+0xec>
    1730:	8c 36       	cpi	r24, 0x6C	; 108
    1732:	21 f4       	brne	.+8      	; 0x173c <vfprintf+0xe8>
    1734:	29 2d       	mov	r18, r9
    1736:	20 68       	ori	r18, 0x80	; 128
    1738:	92 2e       	mov	r9, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0xec>
    173c:	88 36       	cpi	r24, 0x68	; 104
    173e:	41 f4       	brne	.+16     	; 0x1750 <vfprintf+0xfc>
    1740:	f1 01       	movw	r30, r2
    1742:	93 fd       	sbrc	r25, 3
    1744:	85 91       	lpm	r24, Z+
    1746:	93 ff       	sbrs	r25, 3
    1748:	81 91       	ld	r24, Z+
    174a:	1f 01       	movw	r2, r30
    174c:	81 11       	cpse	r24, r1
    174e:	b3 cf       	rjmp	.-154    	; 0x16b6 <vfprintf+0x62>
    1750:	9b eb       	ldi	r25, 0xBB	; 187
    1752:	98 0f       	add	r25, r24
    1754:	93 30       	cpi	r25, 0x03	; 3
    1756:	20 f4       	brcc	.+8      	; 0x1760 <vfprintf+0x10c>
    1758:	99 2d       	mov	r25, r9
    175a:	90 61       	ori	r25, 0x10	; 16
    175c:	80 5e       	subi	r24, 0xE0	; 224
    175e:	07 c0       	rjmp	.+14     	; 0x176e <vfprintf+0x11a>
    1760:	9b e9       	ldi	r25, 0x9B	; 155
    1762:	98 0f       	add	r25, r24
    1764:	93 30       	cpi	r25, 0x03	; 3
    1766:	08 f0       	brcs	.+2      	; 0x176a <vfprintf+0x116>
    1768:	66 c1       	rjmp	.+716    	; 0x1a36 <vfprintf+0x3e2>
    176a:	99 2d       	mov	r25, r9
    176c:	9f 7e       	andi	r25, 0xEF	; 239
    176e:	96 ff       	sbrs	r25, 6
    1770:	16 e0       	ldi	r17, 0x06	; 6
    1772:	9f 73       	andi	r25, 0x3F	; 63
    1774:	99 2e       	mov	r9, r25
    1776:	85 36       	cpi	r24, 0x65	; 101
    1778:	19 f4       	brne	.+6      	; 0x1780 <vfprintf+0x12c>
    177a:	90 64       	ori	r25, 0x40	; 64
    177c:	99 2e       	mov	r9, r25
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x13c>
    1780:	86 36       	cpi	r24, 0x66	; 102
    1782:	21 f4       	brne	.+8      	; 0x178c <vfprintf+0x138>
    1784:	39 2f       	mov	r19, r25
    1786:	30 68       	ori	r19, 0x80	; 128
    1788:	93 2e       	mov	r9, r19
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x13c>
    178c:	11 11       	cpse	r17, r1
    178e:	11 50       	subi	r17, 0x01	; 1
    1790:	97 fe       	sbrs	r9, 7
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <vfprintf+0x14e>
    1794:	1c 33       	cpi	r17, 0x3C	; 60
    1796:	50 f4       	brcc	.+20     	; 0x17ac <vfprintf+0x158>
    1798:	44 24       	eor	r4, r4
    179a:	43 94       	inc	r4
    179c:	41 0e       	add	r4, r17
    179e:	27 e0       	ldi	r18, 0x07	; 7
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <vfprintf+0x164>
    17a2:	18 30       	cpi	r17, 0x08	; 8
    17a4:	38 f0       	brcs	.+14     	; 0x17b4 <vfprintf+0x160>
    17a6:	27 e0       	ldi	r18, 0x07	; 7
    17a8:	17 e0       	ldi	r17, 0x07	; 7
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <vfprintf+0x162>
    17ac:	27 e0       	ldi	r18, 0x07	; 7
    17ae:	9c e3       	ldi	r25, 0x3C	; 60
    17b0:	49 2e       	mov	r4, r25
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x164>
    17b4:	21 2f       	mov	r18, r17
    17b6:	41 2c       	mov	r4, r1
    17b8:	56 01       	movw	r10, r12
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	a8 0e       	add	r10, r24
    17be:	b1 1c       	adc	r11, r1
    17c0:	f6 01       	movw	r30, r12
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	04 2d       	mov	r16, r4
    17cc:	a3 01       	movw	r20, r6
    17ce:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__ftoa_engine>
    17d2:	6c 01       	movw	r12, r24
    17d4:	f9 81       	ldd	r31, Y+1	; 0x01
    17d6:	fc 87       	std	Y+12, r31	; 0x0c
    17d8:	f0 ff       	sbrs	r31, 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x18c>
    17dc:	f3 ff       	sbrs	r31, 3
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x198>
    17e0:	91 fc       	sbrc	r9, 1
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <vfprintf+0x19c>
    17e4:	92 fe       	sbrs	r9, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x1a0>
    17e8:	00 e2       	ldi	r16, 0x20	; 32
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0x1a2>
    17ec:	0d e2       	ldi	r16, 0x2D	; 45
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <vfprintf+0x1a2>
    17f0:	0b e2       	ldi	r16, 0x2B	; 43
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <vfprintf+0x1a2>
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f8:	8c 70       	andi	r24, 0x0C	; 12
    17fa:	19 f0       	breq	.+6      	; 0x1802 <vfprintf+0x1ae>
    17fc:	01 11       	cpse	r16, r1
    17fe:	5a c2       	rjmp	.+1204   	; 0x1cb4 <vfprintf+0x660>
    1800:	9b c2       	rjmp	.+1334   	; 0x1d38 <vfprintf+0x6e4>
    1802:	97 fe       	sbrs	r9, 7
    1804:	10 c0       	rjmp	.+32     	; 0x1826 <vfprintf+0x1d2>
    1806:	4c 0c       	add	r4, r12
    1808:	fc 85       	ldd	r31, Y+12	; 0x0c
    180a:	f4 ff       	sbrs	r31, 4
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <vfprintf+0x1c2>
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	81 33       	cpi	r24, 0x31	; 49
    1812:	09 f4       	brne	.+2      	; 0x1816 <vfprintf+0x1c2>
    1814:	4a 94       	dec	r4
    1816:	14 14       	cp	r1, r4
    1818:	74 f5       	brge	.+92     	; 0x1876 <vfprintf+0x222>
    181a:	28 e0       	ldi	r18, 0x08	; 8
    181c:	24 15       	cp	r18, r4
    181e:	78 f5       	brcc	.+94     	; 0x187e <vfprintf+0x22a>
    1820:	88 e0       	ldi	r24, 0x08	; 8
    1822:	48 2e       	mov	r4, r24
    1824:	2c c0       	rjmp	.+88     	; 0x187e <vfprintf+0x22a>
    1826:	96 fc       	sbrc	r9, 6
    1828:	2a c0       	rjmp	.+84     	; 0x187e <vfprintf+0x22a>
    182a:	81 2f       	mov	r24, r17
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	8c 15       	cp	r24, r12
    1830:	9d 05       	cpc	r25, r13
    1832:	9c f0       	brlt	.+38     	; 0x185a <vfprintf+0x206>
    1834:	3c ef       	ldi	r19, 0xFC	; 252
    1836:	c3 16       	cp	r12, r19
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	d3 06       	cpc	r13, r19
    183c:	74 f0       	brlt	.+28     	; 0x185a <vfprintf+0x206>
    183e:	89 2d       	mov	r24, r9
    1840:	80 68       	ori	r24, 0x80	; 128
    1842:	98 2e       	mov	r9, r24
    1844:	0a c0       	rjmp	.+20     	; 0x185a <vfprintf+0x206>
    1846:	e2 e0       	ldi	r30, 0x02	; 2
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	ec 0f       	add	r30, r28
    184c:	fd 1f       	adc	r31, r29
    184e:	e1 0f       	add	r30, r17
    1850:	f1 1d       	adc	r31, r1
    1852:	80 81       	ld	r24, Z
    1854:	80 33       	cpi	r24, 0x30	; 48
    1856:	19 f4       	brne	.+6      	; 0x185e <vfprintf+0x20a>
    1858:	11 50       	subi	r17, 0x01	; 1
    185a:	11 11       	cpse	r17, r1
    185c:	f4 cf       	rjmp	.-24     	; 0x1846 <vfprintf+0x1f2>
    185e:	97 fe       	sbrs	r9, 7
    1860:	0e c0       	rjmp	.+28     	; 0x187e <vfprintf+0x22a>
    1862:	44 24       	eor	r4, r4
    1864:	43 94       	inc	r4
    1866:	41 0e       	add	r4, r17
    1868:	81 2f       	mov	r24, r17
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	c8 16       	cp	r12, r24
    186e:	d9 06       	cpc	r13, r25
    1870:	2c f4       	brge	.+10     	; 0x187c <vfprintf+0x228>
    1872:	1c 19       	sub	r17, r12
    1874:	04 c0       	rjmp	.+8      	; 0x187e <vfprintf+0x22a>
    1876:	44 24       	eor	r4, r4
    1878:	43 94       	inc	r4
    187a:	01 c0       	rjmp	.+2      	; 0x187e <vfprintf+0x22a>
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	97 fe       	sbrs	r9, 7
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x23a>
    1882:	1c 14       	cp	r1, r12
    1884:	1d 04       	cpc	r1, r13
    1886:	34 f4       	brge	.+12     	; 0x1894 <vfprintf+0x240>
    1888:	c6 01       	movw	r24, r12
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <vfprintf+0x244>
    188e:	85 e0       	ldi	r24, 0x05	; 5
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <vfprintf+0x244>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	01 11       	cpse	r16, r1
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	11 23       	and	r17, r17
    189e:	31 f0       	breq	.+12     	; 0x18ac <vfprintf+0x258>
    18a0:	21 2f       	mov	r18, r17
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	2f 5f       	subi	r18, 0xFF	; 255
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	82 0f       	add	r24, r18
    18aa:	93 1f       	adc	r25, r19
    18ac:	25 2d       	mov	r18, r5
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	82 17       	cp	r24, r18
    18b2:	93 07       	cpc	r25, r19
    18b4:	14 f4       	brge	.+4      	; 0x18ba <vfprintf+0x266>
    18b6:	58 1a       	sub	r5, r24
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x268>
    18ba:	51 2c       	mov	r5, r1
    18bc:	89 2d       	mov	r24, r9
    18be:	89 70       	andi	r24, 0x09	; 9
    18c0:	49 f4       	brne	.+18     	; 0x18d4 <vfprintf+0x280>
    18c2:	55 20       	and	r5, r5
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <vfprintf+0x280>
    18c6:	b7 01       	movw	r22, r14
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    18d0:	5a 94       	dec	r5
    18d2:	f7 cf       	rjmp	.-18     	; 0x18c2 <vfprintf+0x26e>
    18d4:	00 23       	and	r16, r16
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <vfprintf+0x28e>
    18d8:	b7 01       	movw	r22, r14
    18da:	80 2f       	mov	r24, r16
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    18e2:	93 fc       	sbrc	r9, 3
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <vfprintf+0x2a4>
    18e6:	55 20       	and	r5, r5
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <vfprintf+0x2a4>
    18ea:	b7 01       	movw	r22, r14
    18ec:	80 e3       	ldi	r24, 0x30	; 48
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    18f4:	5a 94       	dec	r5
    18f6:	f7 cf       	rjmp	.-18     	; 0x18e6 <vfprintf+0x292>
    18f8:	97 fe       	sbrs	r9, 7
    18fa:	4c c0       	rjmp	.+152    	; 0x1994 <vfprintf+0x340>
    18fc:	46 01       	movw	r8, r12
    18fe:	d7 fe       	sbrs	r13, 7
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x2b2>
    1902:	81 2c       	mov	r8, r1
    1904:	91 2c       	mov	r9, r1
    1906:	c6 01       	movw	r24, r12
    1908:	88 19       	sub	r24, r8
    190a:	99 09       	sbc	r25, r9
    190c:	f3 01       	movw	r30, r6
    190e:	e8 0f       	add	r30, r24
    1910:	f9 1f       	adc	r31, r25
    1912:	fe 87       	std	Y+14, r31	; 0x0e
    1914:	ed 87       	std	Y+13, r30	; 0x0d
    1916:	96 01       	movw	r18, r12
    1918:	24 19       	sub	r18, r4
    191a:	31 09       	sbc	r19, r1
    191c:	38 8b       	std	Y+16, r19	; 0x10
    191e:	2f 87       	std	Y+15, r18	; 0x0f
    1920:	01 2f       	mov	r16, r17
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	11 95       	neg	r17
    1926:	01 95       	neg	r16
    1928:	11 09       	sbc	r17, r1
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	83 16       	cp	r8, r19
    192e:	93 06       	cpc	r9, r19
    1930:	29 f4       	brne	.+10     	; 0x193c <vfprintf+0x2e8>
    1932:	b7 01       	movw	r22, r14
    1934:	8e e2       	ldi	r24, 0x2E	; 46
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    193c:	c8 14       	cp	r12, r8
    193e:	d9 04       	cpc	r13, r9
    1940:	4c f0       	brlt	.+18     	; 0x1954 <vfprintf+0x300>
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	98 89       	ldd	r25, Y+16	; 0x10
    1946:	88 15       	cp	r24, r8
    1948:	99 05       	cpc	r25, r9
    194a:	24 f4       	brge	.+8      	; 0x1954 <vfprintf+0x300>
    194c:	ed 85       	ldd	r30, Y+13	; 0x0d
    194e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1950:	81 81       	ldd	r24, Z+1	; 0x01
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <vfprintf+0x302>
    1954:	80 e3       	ldi	r24, 0x30	; 48
    1956:	f1 e0       	ldi	r31, 0x01	; 1
    1958:	8f 1a       	sub	r8, r31
    195a:	91 08       	sbc	r9, r1
    195c:	2d 85       	ldd	r18, Y+13	; 0x0d
    195e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	3e 87       	std	Y+14, r19	; 0x0e
    1966:	2d 87       	std	Y+13, r18	; 0x0d
    1968:	80 16       	cp	r8, r16
    196a:	91 06       	cpc	r9, r17
    196c:	2c f0       	brlt	.+10     	; 0x1978 <vfprintf+0x324>
    196e:	b7 01       	movw	r22, r14
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1976:	d9 cf       	rjmp	.-78     	; 0x192a <vfprintf+0x2d6>
    1978:	c8 14       	cp	r12, r8
    197a:	d9 04       	cpc	r13, r9
    197c:	41 f4       	brne	.+16     	; 0x198e <vfprintf+0x33a>
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	96 33       	cpi	r25, 0x36	; 54
    1982:	20 f4       	brcc	.+8      	; 0x198c <vfprintf+0x338>
    1984:	95 33       	cpi	r25, 0x35	; 53
    1986:	19 f4       	brne	.+6      	; 0x198e <vfprintf+0x33a>
    1988:	3c 85       	ldd	r19, Y+12	; 0x0c
    198a:	34 ff       	sbrs	r19, 4
    198c:	81 e3       	ldi	r24, 0x31	; 49
    198e:	b7 01       	movw	r22, r14
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	4e c0       	rjmp	.+156    	; 0x1a30 <vfprintf+0x3dc>
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	81 33       	cpi	r24, 0x31	; 49
    1998:	19 f0       	breq	.+6      	; 0x19a0 <vfprintf+0x34c>
    199a:	9c 85       	ldd	r25, Y+12	; 0x0c
    199c:	9f 7e       	andi	r25, 0xEF	; 239
    199e:	9c 87       	std	Y+12, r25	; 0x0c
    19a0:	b7 01       	movw	r22, r14
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    19a8:	11 11       	cpse	r17, r1
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <vfprintf+0x362>
    19ac:	94 fc       	sbrc	r9, 4
    19ae:	18 c0       	rjmp	.+48     	; 0x19e0 <vfprintf+0x38c>
    19b0:	85 e6       	ldi	r24, 0x65	; 101
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	17 c0       	rjmp	.+46     	; 0x19e4 <vfprintf+0x390>
    19b6:	b7 01       	movw	r22, r14
    19b8:	8e e2       	ldi	r24, 0x2E	; 46
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    19c0:	1e 5f       	subi	r17, 0xFE	; 254
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	01 e0       	ldi	r16, 0x01	; 1
    19c6:	08 0f       	add	r16, r24
    19c8:	f3 01       	movw	r30, r6
    19ca:	e8 0f       	add	r30, r24
    19cc:	f1 1d       	adc	r31, r1
    19ce:	80 81       	ld	r24, Z
    19d0:	b7 01       	movw	r22, r14
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    19d8:	80 2f       	mov	r24, r16
    19da:	01 13       	cpse	r16, r17
    19dc:	f3 cf       	rjmp	.-26     	; 0x19c4 <vfprintf+0x370>
    19de:	e6 cf       	rjmp	.-52     	; 0x19ac <vfprintf+0x358>
    19e0:	85 e4       	ldi	r24, 0x45	; 69
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	b7 01       	movw	r22, r14
    19e6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    19ea:	d7 fc       	sbrc	r13, 7
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <vfprintf+0x3a6>
    19ee:	c1 14       	cp	r12, r1
    19f0:	d1 04       	cpc	r13, r1
    19f2:	41 f4       	brne	.+16     	; 0x1a04 <vfprintf+0x3b0>
    19f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    19f6:	e4 ff       	sbrs	r30, 4
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <vfprintf+0x3b0>
    19fa:	d1 94       	neg	r13
    19fc:	c1 94       	neg	r12
    19fe:	d1 08       	sbc	r13, r1
    1a00:	8d e2       	ldi	r24, 0x2D	; 45
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <vfprintf+0x3b2>
    1a04:	8b e2       	ldi	r24, 0x2B	; 43
    1a06:	b7 01       	movw	r22, r14
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1a0e:	80 e3       	ldi	r24, 0x30	; 48
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	c2 16       	cp	r12, r18
    1a14:	d1 04       	cpc	r13, r1
    1a16:	2c f0       	brlt	.+10     	; 0x1a22 <vfprintf+0x3ce>
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	fa e0       	ldi	r31, 0x0A	; 10
    1a1c:	cf 1a       	sub	r12, r31
    1a1e:	d1 08       	sbc	r13, r1
    1a20:	f7 cf       	rjmp	.-18     	; 0x1a10 <vfprintf+0x3bc>
    1a22:	b7 01       	movw	r22, r14
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1a2a:	b7 01       	movw	r22, r14
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	c0 96       	adiw	r24, 0x30	; 48
    1a30:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1a34:	54 c1       	rjmp	.+680    	; 0x1cde <vfprintf+0x68a>
    1a36:	83 36       	cpi	r24, 0x63	; 99
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <vfprintf+0x3f2>
    1a3a:	83 37       	cpi	r24, 0x73	; 115
    1a3c:	79 f0       	breq	.+30     	; 0x1a5c <vfprintf+0x408>
    1a3e:	83 35       	cpi	r24, 0x53	; 83
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <vfprintf+0x3f0>
    1a42:	56 c0       	rjmp	.+172    	; 0x1af0 <vfprintf+0x49c>
    1a44:	20 c0       	rjmp	.+64     	; 0x1a86 <vfprintf+0x432>
    1a46:	56 01       	movw	r10, r12
    1a48:	32 e0       	ldi	r19, 0x02	; 2
    1a4a:	a3 0e       	add	r10, r19
    1a4c:	b1 1c       	adc	r11, r1
    1a4e:	f6 01       	movw	r30, r12
    1a50:	80 81       	ld	r24, Z
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	01 e0       	ldi	r16, 0x01	; 1
    1a56:	10 e0       	ldi	r17, 0x00	; 0
    1a58:	63 01       	movw	r12, r6
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <vfprintf+0x42c>
    1a5c:	56 01       	movw	r10, r12
    1a5e:	f2 e0       	ldi	r31, 0x02	; 2
    1a60:	af 0e       	add	r10, r31
    1a62:	b1 1c       	adc	r11, r1
    1a64:	f6 01       	movw	r30, r12
    1a66:	c0 80       	ld	r12, Z
    1a68:	d1 80       	ldd	r13, Z+1	; 0x01
    1a6a:	96 fe       	sbrs	r9, 6
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <vfprintf+0x420>
    1a6e:	61 2f       	mov	r22, r17
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <vfprintf+0x424>
    1a74:	6f ef       	ldi	r22, 0xFF	; 255
    1a76:	7f ef       	ldi	r23, 0xFF	; 255
    1a78:	c6 01       	movw	r24, r12
    1a7a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <strnlen>
    1a7e:	8c 01       	movw	r16, r24
    1a80:	f9 2d       	mov	r31, r9
    1a82:	ff 77       	andi	r31, 0x7F	; 127
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <vfprintf+0x45a>
    1a86:	56 01       	movw	r10, r12
    1a88:	22 e0       	ldi	r18, 0x02	; 2
    1a8a:	a2 0e       	add	r10, r18
    1a8c:	b1 1c       	adc	r11, r1
    1a8e:	f6 01       	movw	r30, r12
    1a90:	c0 80       	ld	r12, Z
    1a92:	d1 80       	ldd	r13, Z+1	; 0x01
    1a94:	96 fe       	sbrs	r9, 6
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <vfprintf+0x44a>
    1a98:	61 2f       	mov	r22, r17
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vfprintf+0x44e>
    1a9e:	6f ef       	ldi	r22, 0xFF	; 255
    1aa0:	7f ef       	ldi	r23, 0xFF	; 255
    1aa2:	c6 01       	movw	r24, r12
    1aa4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <strnlen_P>
    1aa8:	8c 01       	movw	r16, r24
    1aaa:	f9 2d       	mov	r31, r9
    1aac:	f0 68       	ori	r31, 0x80	; 128
    1aae:	9f 2e       	mov	r9, r31
    1ab0:	f3 fd       	sbrc	r31, 3
    1ab2:	1a c0       	rjmp	.+52     	; 0x1ae8 <vfprintf+0x494>
    1ab4:	85 2d       	mov	r24, r5
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	08 17       	cp	r16, r24
    1aba:	19 07       	cpc	r17, r25
    1abc:	a8 f4       	brcc	.+42     	; 0x1ae8 <vfprintf+0x494>
    1abe:	b7 01       	movw	r22, r14
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1ac8:	5a 94       	dec	r5
    1aca:	f4 cf       	rjmp	.-24     	; 0x1ab4 <vfprintf+0x460>
    1acc:	f6 01       	movw	r30, r12
    1ace:	97 fc       	sbrc	r9, 7
    1ad0:	85 91       	lpm	r24, Z+
    1ad2:	97 fe       	sbrs	r9, 7
    1ad4:	81 91       	ld	r24, Z+
    1ad6:	6f 01       	movw	r12, r30
    1ad8:	b7 01       	movw	r22, r14
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1ae0:	51 10       	cpse	r5, r1
    1ae2:	5a 94       	dec	r5
    1ae4:	01 50       	subi	r16, 0x01	; 1
    1ae6:	11 09       	sbc	r17, r1
    1ae8:	01 15       	cp	r16, r1
    1aea:	11 05       	cpc	r17, r1
    1aec:	79 f7       	brne	.-34     	; 0x1acc <vfprintf+0x478>
    1aee:	f7 c0       	rjmp	.+494    	; 0x1cde <vfprintf+0x68a>
    1af0:	84 36       	cpi	r24, 0x64	; 100
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <vfprintf+0x4a4>
    1af4:	89 36       	cpi	r24, 0x69	; 105
    1af6:	61 f5       	brne	.+88     	; 0x1b50 <vfprintf+0x4fc>
    1af8:	56 01       	movw	r10, r12
    1afa:	97 fe       	sbrs	r9, 7
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <vfprintf+0x4bc>
    1afe:	24 e0       	ldi	r18, 0x04	; 4
    1b00:	a2 0e       	add	r10, r18
    1b02:	b1 1c       	adc	r11, r1
    1b04:	f6 01       	movw	r30, r12
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	0a c0       	rjmp	.+20     	; 0x1b24 <vfprintf+0x4d0>
    1b10:	f2 e0       	ldi	r31, 0x02	; 2
    1b12:	af 0e       	add	r10, r31
    1b14:	b1 1c       	adc	r11, r1
    1b16:	f6 01       	movw	r30, r12
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	07 2e       	mov	r0, r23
    1b1e:	00 0c       	add	r0, r0
    1b20:	88 0b       	sbc	r24, r24
    1b22:	99 0b       	sbc	r25, r25
    1b24:	f9 2d       	mov	r31, r9
    1b26:	ff 76       	andi	r31, 0x6F	; 111
    1b28:	9f 2e       	mov	r9, r31
    1b2a:	97 ff       	sbrs	r25, 7
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <vfprintf+0x4ec>
    1b2e:	90 95       	com	r25
    1b30:	80 95       	com	r24
    1b32:	70 95       	com	r23
    1b34:	61 95       	neg	r22
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	f0 68       	ori	r31, 0x80	; 128
    1b3e:	9f 2e       	mov	r9, r31
    1b40:	2a e0       	ldi	r18, 0x0A	; 10
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	a3 01       	movw	r20, r6
    1b46:	0e 94 77 10 	call	0x20ee	; 0x20ee <__ultoa_invert>
    1b4a:	c8 2e       	mov	r12, r24
    1b4c:	c6 18       	sub	r12, r6
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <vfprintf+0x57a>
    1b50:	09 2d       	mov	r16, r9
    1b52:	85 37       	cpi	r24, 0x75	; 117
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <vfprintf+0x50a>
    1b56:	0f 7e       	andi	r16, 0xEF	; 239
    1b58:	2a e0       	ldi	r18, 0x0A	; 10
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	1d c0       	rjmp	.+58     	; 0x1b98 <vfprintf+0x544>
    1b5e:	09 7f       	andi	r16, 0xF9	; 249
    1b60:	8f 36       	cpi	r24, 0x6F	; 111
    1b62:	91 f0       	breq	.+36     	; 0x1b88 <vfprintf+0x534>
    1b64:	18 f4       	brcc	.+6      	; 0x1b6c <vfprintf+0x518>
    1b66:	88 35       	cpi	r24, 0x58	; 88
    1b68:	59 f0       	breq	.+22     	; 0x1b80 <vfprintf+0x52c>
    1b6a:	c3 c0       	rjmp	.+390    	; 0x1cf2 <vfprintf+0x69e>
    1b6c:	80 37       	cpi	r24, 0x70	; 112
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <vfprintf+0x522>
    1b70:	88 37       	cpi	r24, 0x78	; 120
    1b72:	11 f0       	breq	.+4      	; 0x1b78 <vfprintf+0x524>
    1b74:	be c0       	rjmp	.+380    	; 0x1cf2 <vfprintf+0x69e>
    1b76:	00 61       	ori	r16, 0x10	; 16
    1b78:	04 ff       	sbrs	r16, 4
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <vfprintf+0x53a>
    1b7c:	04 60       	ori	r16, 0x04	; 4
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <vfprintf+0x53a>
    1b80:	94 fe       	sbrs	r9, 4
    1b82:	08 c0       	rjmp	.+16     	; 0x1b94 <vfprintf+0x540>
    1b84:	06 60       	ori	r16, 0x06	; 6
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <vfprintf+0x540>
    1b88:	28 e0       	ldi	r18, 0x08	; 8
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	05 c0       	rjmp	.+10     	; 0x1b98 <vfprintf+0x544>
    1b8e:	20 e1       	ldi	r18, 0x10	; 16
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x544>
    1b94:	20 e1       	ldi	r18, 0x10	; 16
    1b96:	32 e0       	ldi	r19, 0x02	; 2
    1b98:	56 01       	movw	r10, r12
    1b9a:	07 ff       	sbrs	r16, 7
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <vfprintf+0x55c>
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	a8 0e       	add	r10, r24
    1ba2:	b1 1c       	adc	r11, r1
    1ba4:	f6 01       	movw	r30, r12
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	08 c0       	rjmp	.+16     	; 0x1bc0 <vfprintf+0x56c>
    1bb0:	f2 e0       	ldi	r31, 0x02	; 2
    1bb2:	af 0e       	add	r10, r31
    1bb4:	b1 1c       	adc	r11, r1
    1bb6:	f6 01       	movw	r30, r12
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a3 01       	movw	r20, r6
    1bc2:	0e 94 77 10 	call	0x20ee	; 0x20ee <__ultoa_invert>
    1bc6:	c8 2e       	mov	r12, r24
    1bc8:	c6 18       	sub	r12, r6
    1bca:	0f 77       	andi	r16, 0x7F	; 127
    1bcc:	90 2e       	mov	r9, r16
    1bce:	96 fe       	sbrs	r9, 6
    1bd0:	0b c0       	rjmp	.+22     	; 0x1be8 <vfprintf+0x594>
    1bd2:	09 2d       	mov	r16, r9
    1bd4:	0e 7f       	andi	r16, 0xFE	; 254
    1bd6:	c1 16       	cp	r12, r17
    1bd8:	50 f4       	brcc	.+20     	; 0x1bee <vfprintf+0x59a>
    1bda:	94 fe       	sbrs	r9, 4
    1bdc:	0a c0       	rjmp	.+20     	; 0x1bf2 <vfprintf+0x59e>
    1bde:	92 fc       	sbrc	r9, 2
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <vfprintf+0x59e>
    1be2:	09 2d       	mov	r16, r9
    1be4:	0e 7e       	andi	r16, 0xEE	; 238
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <vfprintf+0x59e>
    1be8:	dc 2c       	mov	r13, r12
    1bea:	09 2d       	mov	r16, r9
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vfprintf+0x5a0>
    1bee:	dc 2c       	mov	r13, r12
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <vfprintf+0x5a0>
    1bf2:	d1 2e       	mov	r13, r17
    1bf4:	04 ff       	sbrs	r16, 4
    1bf6:	0d c0       	rjmp	.+26     	; 0x1c12 <vfprintf+0x5be>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ec 0d       	add	r30, r12
    1bfc:	f1 1d       	adc	r31, r1
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 33       	cpi	r24, 0x30	; 48
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <vfprintf+0x5b4>
    1c04:	09 7e       	andi	r16, 0xE9	; 233
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <vfprintf+0x5c6>
    1c08:	02 ff       	sbrs	r16, 2
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0x5c4>
    1c0c:	d3 94       	inc	r13
    1c0e:	d3 94       	inc	r13
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <vfprintf+0x5c6>
    1c12:	80 2f       	mov	r24, r16
    1c14:	86 78       	andi	r24, 0x86	; 134
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <vfprintf+0x5c6>
    1c18:	d3 94       	inc	r13
    1c1a:	03 fd       	sbrc	r16, 3
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <vfprintf+0x5ec>
    1c1e:	00 ff       	sbrs	r16, 0
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <vfprintf+0x5da>
    1c22:	1c 2d       	mov	r17, r12
    1c24:	d5 14       	cp	r13, r5
    1c26:	80 f4       	brcc	.+32     	; 0x1c48 <vfprintf+0x5f4>
    1c28:	15 0d       	add	r17, r5
    1c2a:	1d 19       	sub	r17, r13
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <vfprintf+0x5f4>
    1c2e:	d5 14       	cp	r13, r5
    1c30:	58 f4       	brcc	.+22     	; 0x1c48 <vfprintf+0x5f4>
    1c32:	b7 01       	movw	r22, r14
    1c34:	80 e2       	ldi	r24, 0x20	; 32
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1c3c:	d3 94       	inc	r13
    1c3e:	f7 cf       	rjmp	.-18     	; 0x1c2e <vfprintf+0x5da>
    1c40:	d5 14       	cp	r13, r5
    1c42:	10 f4       	brcc	.+4      	; 0x1c48 <vfprintf+0x5f4>
    1c44:	5d 18       	sub	r5, r13
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <vfprintf+0x5f6>
    1c48:	51 2c       	mov	r5, r1
    1c4a:	04 ff       	sbrs	r16, 4
    1c4c:	10 c0       	rjmp	.+32     	; 0x1c6e <vfprintf+0x61a>
    1c4e:	b7 01       	movw	r22, r14
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1c58:	02 ff       	sbrs	r16, 2
    1c5a:	17 c0       	rjmp	.+46     	; 0x1c8a <vfprintf+0x636>
    1c5c:	01 fd       	sbrc	r16, 1
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <vfprintf+0x612>
    1c60:	88 e7       	ldi	r24, 0x78	; 120
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x616>
    1c66:	88 e5       	ldi	r24, 0x58	; 88
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	0c c0       	rjmp	.+24     	; 0x1c86 <vfprintf+0x632>
    1c6e:	80 2f       	mov	r24, r16
    1c70:	86 78       	andi	r24, 0x86	; 134
    1c72:	59 f0       	breq	.+22     	; 0x1c8a <vfprintf+0x636>
    1c74:	01 ff       	sbrs	r16, 1
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <vfprintf+0x628>
    1c78:	8b e2       	ldi	r24, 0x2B	; 43
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <vfprintf+0x62a>
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	07 fd       	sbrc	r16, 7
    1c80:	8d e2       	ldi	r24, 0x2D	; 45
    1c82:	b7 01       	movw	r22, r14
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1c8a:	c1 16       	cp	r12, r17
    1c8c:	38 f4       	brcc	.+14     	; 0x1c9c <vfprintf+0x648>
    1c8e:	b7 01       	movw	r22, r14
    1c90:	80 e3       	ldi	r24, 0x30	; 48
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1c98:	11 50       	subi	r17, 0x01	; 1
    1c9a:	f7 cf       	rjmp	.-18     	; 0x1c8a <vfprintf+0x636>
    1c9c:	ca 94       	dec	r12
    1c9e:	f3 01       	movw	r30, r6
    1ca0:	ec 0d       	add	r30, r12
    1ca2:	f1 1d       	adc	r31, r1
    1ca4:	80 81       	ld	r24, Z
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1cae:	c1 10       	cpse	r12, r1
    1cb0:	f5 cf       	rjmp	.-22     	; 0x1c9c <vfprintf+0x648>
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <vfprintf+0x68a>
    1cb4:	f4 e0       	ldi	r31, 0x04	; 4
    1cb6:	f5 15       	cp	r31, r5
    1cb8:	60 f5       	brcc	.+88     	; 0x1d12 <vfprintf+0x6be>
    1cba:	84 e0       	ldi	r24, 0x04	; 4
    1cbc:	58 1a       	sub	r5, r24
    1cbe:	93 fe       	sbrs	r9, 3
    1cc0:	1f c0       	rjmp	.+62     	; 0x1d00 <vfprintf+0x6ac>
    1cc2:	01 11       	cpse	r16, r1
    1cc4:	27 c0       	rjmp	.+78     	; 0x1d14 <vfprintf+0x6c0>
    1cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc8:	23 ff       	sbrs	r18, 3
    1cca:	2a c0       	rjmp	.+84     	; 0x1d20 <vfprintf+0x6cc>
    1ccc:	04 eb       	ldi	r16, 0xB4	; 180
    1cce:	10 e0       	ldi	r17, 0x00	; 0
    1cd0:	39 2d       	mov	r19, r9
    1cd2:	30 71       	andi	r19, 0x10	; 16
    1cd4:	93 2e       	mov	r9, r19
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	84 91       	lpm	r24, Z
    1cda:	81 11       	cpse	r24, r1
    1cdc:	24 c0       	rjmp	.+72     	; 0x1d26 <vfprintf+0x6d2>
    1cde:	55 20       	and	r5, r5
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <vfprintf+0x690>
    1ce2:	e4 cc       	rjmp	.-1592   	; 0x16ac <vfprintf+0x58>
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1cee:	5a 94       	dec	r5
    1cf0:	f6 cf       	rjmp	.-20     	; 0x1cde <vfprintf+0x68a>
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	86 81       	ldd	r24, Z+6	; 0x06
    1cf6:	97 81       	ldd	r25, Z+7	; 0x07
    1cf8:	26 c0       	rjmp	.+76     	; 0x1d46 <vfprintf+0x6f2>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	23 c0       	rjmp	.+70     	; 0x1d46 <vfprintf+0x6f2>
    1d00:	b7 01       	movw	r22, r14
    1d02:	80 e2       	ldi	r24, 0x20	; 32
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1d0a:	5a 94       	dec	r5
    1d0c:	51 10       	cpse	r5, r1
    1d0e:	f8 cf       	rjmp	.-16     	; 0x1d00 <vfprintf+0x6ac>
    1d10:	d8 cf       	rjmp	.-80     	; 0x1cc2 <vfprintf+0x66e>
    1d12:	51 2c       	mov	r5, r1
    1d14:	b7 01       	movw	r22, r14
    1d16:	80 2f       	mov	r24, r16
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1d1e:	d3 cf       	rjmp	.-90     	; 0x1cc6 <vfprintf+0x672>
    1d20:	08 eb       	ldi	r16, 0xB8	; 184
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	d5 cf       	rjmp	.-86     	; 0x1cd0 <vfprintf+0x67c>
    1d26:	91 10       	cpse	r9, r1
    1d28:	80 52       	subi	r24, 0x20	; 32
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    1d32:	0f 5f       	subi	r16, 0xFF	; 255
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	cf cf       	rjmp	.-98     	; 0x1cd6 <vfprintf+0x682>
    1d38:	23 e0       	ldi	r18, 0x03	; 3
    1d3a:	25 15       	cp	r18, r5
    1d3c:	10 f4       	brcc	.+4      	; 0x1d42 <vfprintf+0x6ee>
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	bd cf       	rjmp	.-134    	; 0x1cbc <vfprintf+0x668>
    1d42:	51 2c       	mov	r5, r1
    1d44:	c0 cf       	rjmp	.-128    	; 0x1cc6 <vfprintf+0x672>
    1d46:	60 96       	adiw	r28, 0x10	; 16
    1d48:	e2 e1       	ldi	r30, 0x12	; 18
    1d4a:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__epilogue_restores__>

00001d4e <__prologue_saves__>:
    1d4e:	2f 92       	push	r2
    1d50:	3f 92       	push	r3
    1d52:	4f 92       	push	r4
    1d54:	5f 92       	push	r5
    1d56:	6f 92       	push	r6
    1d58:	7f 92       	push	r7
    1d5a:	8f 92       	push	r8
    1d5c:	9f 92       	push	r9
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	ca 1b       	sub	r28, r26
    1d78:	db 0b       	sbc	r29, r27
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	09 94       	ijmp

00001d86 <__epilogue_restores__>:
    1d86:	2a 88       	ldd	r2, Y+18	; 0x12
    1d88:	39 88       	ldd	r3, Y+17	; 0x11
    1d8a:	48 88       	ldd	r4, Y+16	; 0x10
    1d8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d90:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d92:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d94:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d96:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d98:	b9 84       	ldd	r11, Y+9	; 0x09
    1d9a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d9c:	df 80       	ldd	r13, Y+7	; 0x07
    1d9e:	ee 80       	ldd	r14, Y+6	; 0x06
    1da0:	fd 80       	ldd	r15, Y+5	; 0x05
    1da2:	0c 81       	ldd	r16, Y+4	; 0x04
    1da4:	1b 81       	ldd	r17, Y+3	; 0x03
    1da6:	aa 81       	ldd	r26, Y+2	; 0x02
    1da8:	b9 81       	ldd	r27, Y+1	; 0x01
    1daa:	ce 0f       	add	r28, r30
    1dac:	d1 1d       	adc	r29, r1
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	ed 01       	movw	r28, r26
    1dba:	08 95       	ret

00001dbc <__ftoa_engine>:
    1dbc:	28 30       	cpi	r18, 0x08	; 8
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <__ftoa_engine+0x6>
    1dc0:	27 e0       	ldi	r18, 0x07	; 7
    1dc2:	33 27       	eor	r19, r19
    1dc4:	da 01       	movw	r26, r20
    1dc6:	99 0f       	add	r25, r25
    1dc8:	31 1d       	adc	r19, r1
    1dca:	87 fd       	sbrc	r24, 7
    1dcc:	91 60       	ori	r25, 0x01	; 1
    1dce:	00 96       	adiw	r24, 0x00	; 0
    1dd0:	61 05       	cpc	r22, r1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	39 f4       	brne	.+14     	; 0x1de4 <__ftoa_engine+0x28>
    1dd6:	32 60       	ori	r19, 0x02	; 2
    1dd8:	2e 5f       	subi	r18, 0xFE	; 254
    1dda:	3d 93       	st	X+, r19
    1ddc:	30 e3       	ldi	r19, 0x30	; 48
    1dde:	2a 95       	dec	r18
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <__ftoa_engine+0x1e>
    1de2:	08 95       	ret
    1de4:	9f 3f       	cpi	r25, 0xFF	; 255
    1de6:	30 f0       	brcs	.+12     	; 0x1df4 <__ftoa_engine+0x38>
    1de8:	80 38       	cpi	r24, 0x80	; 128
    1dea:	71 05       	cpc	r23, r1
    1dec:	61 05       	cpc	r22, r1
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <__ftoa_engine+0x36>
    1df0:	3c 5f       	subi	r19, 0xFC	; 252
    1df2:	3c 5f       	subi	r19, 0xFC	; 252
    1df4:	3d 93       	st	X+, r19
    1df6:	91 30       	cpi	r25, 0x01	; 1
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <__ftoa_engine+0x40>
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	91 1d       	adc	r25, r1
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	1f 93       	push	r17
    1e04:	0f 93       	push	r16
    1e06:	ff 92       	push	r15
    1e08:	ef 92       	push	r14
    1e0a:	19 2f       	mov	r17, r25
    1e0c:	98 7f       	andi	r25, 0xF8	; 248
    1e0e:	96 95       	lsr	r25
    1e10:	e9 2f       	mov	r30, r25
    1e12:	96 95       	lsr	r25
    1e14:	96 95       	lsr	r25
    1e16:	e9 0f       	add	r30, r25
    1e18:	ff 27       	eor	r31, r31
    1e1a:	ea 5e       	subi	r30, 0xEA	; 234
    1e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1e:	99 27       	eor	r25, r25
    1e20:	33 27       	eor	r19, r19
    1e22:	ee 24       	eor	r14, r14
    1e24:	ff 24       	eor	r15, r15
    1e26:	a7 01       	movw	r20, r14
    1e28:	e7 01       	movw	r28, r14
    1e2a:	05 90       	lpm	r0, Z+
    1e2c:	08 94       	sec
    1e2e:	07 94       	ror	r0
    1e30:	28 f4       	brcc	.+10     	; 0x1e3c <__ftoa_engine+0x80>
    1e32:	36 0f       	add	r19, r22
    1e34:	e7 1e       	adc	r14, r23
    1e36:	f8 1e       	adc	r15, r24
    1e38:	49 1f       	adc	r20, r25
    1e3a:	51 1d       	adc	r21, r1
    1e3c:	66 0f       	add	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	06 94       	lsr	r0
    1e46:	a1 f7       	brne	.-24     	; 0x1e30 <__ftoa_engine+0x74>
    1e48:	05 90       	lpm	r0, Z+
    1e4a:	07 94       	ror	r0
    1e4c:	28 f4       	brcc	.+10     	; 0x1e58 <__ftoa_engine+0x9c>
    1e4e:	e7 0e       	add	r14, r23
    1e50:	f8 1e       	adc	r15, r24
    1e52:	49 1f       	adc	r20, r25
    1e54:	56 1f       	adc	r21, r22
    1e56:	c1 1d       	adc	r28, r1
    1e58:	77 0f       	add	r23, r23
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	66 1f       	adc	r22, r22
    1e60:	06 94       	lsr	r0
    1e62:	a1 f7       	brne	.-24     	; 0x1e4c <__ftoa_engine+0x90>
    1e64:	05 90       	lpm	r0, Z+
    1e66:	07 94       	ror	r0
    1e68:	28 f4       	brcc	.+10     	; 0x1e74 <__ftoa_engine+0xb8>
    1e6a:	f8 0e       	add	r15, r24
    1e6c:	49 1f       	adc	r20, r25
    1e6e:	56 1f       	adc	r21, r22
    1e70:	c7 1f       	adc	r28, r23
    1e72:	d1 1d       	adc	r29, r1
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	06 94       	lsr	r0
    1e7e:	a1 f7       	brne	.-24     	; 0x1e68 <__ftoa_engine+0xac>
    1e80:	05 90       	lpm	r0, Z+
    1e82:	07 94       	ror	r0
    1e84:	20 f4       	brcc	.+8      	; 0x1e8e <__ftoa_engine+0xd2>
    1e86:	49 0f       	add	r20, r25
    1e88:	56 1f       	adc	r21, r22
    1e8a:	c7 1f       	adc	r28, r23
    1e8c:	d8 1f       	adc	r29, r24
    1e8e:	99 0f       	add	r25, r25
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	06 94       	lsr	r0
    1e98:	a9 f7       	brne	.-22     	; 0x1e84 <__ftoa_engine+0xc8>
    1e9a:	84 91       	lpm	r24, Z
    1e9c:	10 95       	com	r17
    1e9e:	17 70       	andi	r17, 0x07	; 7
    1ea0:	41 f0       	breq	.+16     	; 0x1eb2 <__ftoa_engine+0xf6>
    1ea2:	d6 95       	lsr	r29
    1ea4:	c7 95       	ror	r28
    1ea6:	57 95       	ror	r21
    1ea8:	47 95       	ror	r20
    1eaa:	f7 94       	ror	r15
    1eac:	e7 94       	ror	r14
    1eae:	1a 95       	dec	r17
    1eb0:	c1 f7       	brne	.-16     	; 0x1ea2 <__ftoa_engine+0xe6>
    1eb2:	ec eb       	ldi	r30, 0xBC	; 188
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	68 94       	set
    1eb8:	15 90       	lpm	r1, Z+
    1eba:	15 91       	lpm	r17, Z+
    1ebc:	35 91       	lpm	r19, Z+
    1ebe:	65 91       	lpm	r22, Z+
    1ec0:	95 91       	lpm	r25, Z+
    1ec2:	05 90       	lpm	r0, Z+
    1ec4:	7f e2       	ldi	r23, 0x2F	; 47
    1ec6:	73 95       	inc	r23
    1ec8:	e1 18       	sub	r14, r1
    1eca:	f1 0a       	sbc	r15, r17
    1ecc:	43 0b       	sbc	r20, r19
    1ece:	56 0b       	sbc	r21, r22
    1ed0:	c9 0b       	sbc	r28, r25
    1ed2:	d0 09       	sbc	r29, r0
    1ed4:	c0 f7       	brcc	.-16     	; 0x1ec6 <__ftoa_engine+0x10a>
    1ed6:	e1 0c       	add	r14, r1
    1ed8:	f1 1e       	adc	r15, r17
    1eda:	43 1f       	adc	r20, r19
    1edc:	56 1f       	adc	r21, r22
    1ede:	c9 1f       	adc	r28, r25
    1ee0:	d0 1d       	adc	r29, r0
    1ee2:	7e f4       	brtc	.+30     	; 0x1f02 <__ftoa_engine+0x146>
    1ee4:	70 33       	cpi	r23, 0x30	; 48
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__ftoa_engine+0x130>
    1ee8:	8a 95       	dec	r24
    1eea:	e6 cf       	rjmp	.-52     	; 0x1eb8 <__ftoa_engine+0xfc>
    1eec:	e8 94       	clt
    1eee:	01 50       	subi	r16, 0x01	; 1
    1ef0:	30 f0       	brcs	.+12     	; 0x1efe <__ftoa_engine+0x142>
    1ef2:	08 0f       	add	r16, r24
    1ef4:	0a f4       	brpl	.+2      	; 0x1ef8 <__ftoa_engine+0x13c>
    1ef6:	00 27       	eor	r16, r16
    1ef8:	02 17       	cp	r16, r18
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <__ftoa_engine+0x142>
    1efc:	20 2f       	mov	r18, r16
    1efe:	23 95       	inc	r18
    1f00:	02 2f       	mov	r16, r18
    1f02:	7a 33       	cpi	r23, 0x3A	; 58
    1f04:	28 f0       	brcs	.+10     	; 0x1f10 <__ftoa_engine+0x154>
    1f06:	79 e3       	ldi	r23, 0x39	; 57
    1f08:	7d 93       	st	X+, r23
    1f0a:	2a 95       	dec	r18
    1f0c:	e9 f7       	brne	.-6      	; 0x1f08 <__ftoa_engine+0x14c>
    1f0e:	10 c0       	rjmp	.+32     	; 0x1f30 <__ftoa_engine+0x174>
    1f10:	7d 93       	st	X+, r23
    1f12:	2a 95       	dec	r18
    1f14:	89 f6       	brne	.-94     	; 0x1eb8 <__ftoa_engine+0xfc>
    1f16:	06 94       	lsr	r0
    1f18:	97 95       	ror	r25
    1f1a:	67 95       	ror	r22
    1f1c:	37 95       	ror	r19
    1f1e:	17 95       	ror	r17
    1f20:	17 94       	ror	r1
    1f22:	e1 18       	sub	r14, r1
    1f24:	f1 0a       	sbc	r15, r17
    1f26:	43 0b       	sbc	r20, r19
    1f28:	56 0b       	sbc	r21, r22
    1f2a:	c9 0b       	sbc	r28, r25
    1f2c:	d0 09       	sbc	r29, r0
    1f2e:	98 f0       	brcs	.+38     	; 0x1f56 <__ftoa_engine+0x19a>
    1f30:	23 95       	inc	r18
    1f32:	7e 91       	ld	r23, -X
    1f34:	73 95       	inc	r23
    1f36:	7a 33       	cpi	r23, 0x3A	; 58
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <__ftoa_engine+0x180>
    1f3a:	70 e3       	ldi	r23, 0x30	; 48
    1f3c:	7c 93       	st	X, r23
    1f3e:	20 13       	cpse	r18, r16
    1f40:	b8 f7       	brcc	.-18     	; 0x1f30 <__ftoa_engine+0x174>
    1f42:	7e 91       	ld	r23, -X
    1f44:	70 61       	ori	r23, 0x10	; 16
    1f46:	7d 93       	st	X+, r23
    1f48:	30 f0       	brcs	.+12     	; 0x1f56 <__ftoa_engine+0x19a>
    1f4a:	83 95       	inc	r24
    1f4c:	71 e3       	ldi	r23, 0x31	; 49
    1f4e:	7d 93       	st	X+, r23
    1f50:	70 e3       	ldi	r23, 0x30	; 48
    1f52:	2a 95       	dec	r18
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <__ftoa_engine+0x192>
    1f56:	11 24       	eor	r1, r1
    1f58:	ef 90       	pop	r14
    1f5a:	ff 90       	pop	r15
    1f5c:	0f 91       	pop	r16
    1f5e:	1f 91       	pop	r17
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	99 27       	eor	r25, r25
    1f66:	87 fd       	sbrc	r24, 7
    1f68:	90 95       	com	r25
    1f6a:	08 95       	ret

00001f6c <strnlen_P>:
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	05 90       	lpm	r0, Z+
    1f70:	61 50       	subi	r22, 0x01	; 1
    1f72:	70 40       	sbci	r23, 0x00	; 0
    1f74:	01 10       	cpse	r0, r1
    1f76:	d8 f7       	brcc	.-10     	; 0x1f6e <strnlen_P+0x2>
    1f78:	80 95       	com	r24
    1f7a:	90 95       	com	r25
    1f7c:	8e 0f       	add	r24, r30
    1f7e:	9f 1f       	adc	r25, r31
    1f80:	08 95       	ret

00001f82 <strnlen>:
    1f82:	fc 01       	movw	r30, r24
    1f84:	61 50       	subi	r22, 0x01	; 1
    1f86:	70 40       	sbci	r23, 0x00	; 0
    1f88:	01 90       	ld	r0, Z+
    1f8a:	01 10       	cpse	r0, r1
    1f8c:	d8 f7       	brcc	.-10     	; 0x1f84 <strnlen+0x2>
    1f8e:	80 95       	com	r24
    1f90:	90 95       	com	r25
    1f92:	8e 0f       	add	r24, r30
    1f94:	9f 1f       	adc	r25, r31
    1f96:	08 95       	ret

00001f98 <fputc>:
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	fb 01       	movw	r30, r22
    1fa2:	23 81       	ldd	r18, Z+3	; 0x03
    1fa4:	21 fd       	sbrc	r18, 1
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <fputc+0x16>
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	9f ef       	ldi	r25, 0xFF	; 255
    1fac:	2c c0       	rjmp	.+88     	; 0x2006 <fputc+0x6e>
    1fae:	22 ff       	sbrs	r18, 2
    1fb0:	16 c0       	rjmp	.+44     	; 0x1fde <fputc+0x46>
    1fb2:	46 81       	ldd	r20, Z+6	; 0x06
    1fb4:	57 81       	ldd	r21, Z+7	; 0x07
    1fb6:	24 81       	ldd	r18, Z+4	; 0x04
    1fb8:	35 81       	ldd	r19, Z+5	; 0x05
    1fba:	42 17       	cp	r20, r18
    1fbc:	53 07       	cpc	r21, r19
    1fbe:	44 f4       	brge	.+16     	; 0x1fd0 <fputc+0x38>
    1fc0:	a0 81       	ld	r26, Z
    1fc2:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc4:	9d 01       	movw	r18, r26
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	31 83       	std	Z+1, r19	; 0x01
    1fcc:	20 83       	st	Z, r18
    1fce:	8c 93       	st	X, r24
    1fd0:	26 81       	ldd	r18, Z+6	; 0x06
    1fd2:	37 81       	ldd	r19, Z+7	; 0x07
    1fd4:	2f 5f       	subi	r18, 0xFF	; 255
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	37 83       	std	Z+7, r19	; 0x07
    1fda:	26 83       	std	Z+6, r18	; 0x06
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <fputc+0x6e>
    1fde:	8b 01       	movw	r16, r22
    1fe0:	ec 01       	movw	r28, r24
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	00 84       	ldd	r0, Z+8	; 0x08
    1fe6:	f1 85       	ldd	r31, Z+9	; 0x09
    1fe8:	e0 2d       	mov	r30, r0
    1fea:	09 95       	icall
    1fec:	89 2b       	or	r24, r25
    1fee:	e1 f6       	brne	.-72     	; 0x1fa8 <fputc+0x10>
    1ff0:	d8 01       	movw	r26, r16
    1ff2:	16 96       	adiw	r26, 0x06	; 6
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	17 97       	sbiw	r26, 0x07	; 7
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	17 96       	adiw	r26, 0x07	; 7
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
    2002:	16 97       	sbiw	r26, 0x06	; 6
    2004:	ce 01       	movw	r24, r28
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	08 95       	ret

00002010 <printf>:
    2010:	a0 e0       	ldi	r26, 0x00	; 0
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ee e0       	ldi	r30, 0x0E	; 14
    2016:	f0 e1       	ldi	r31, 0x10	; 16
    2018:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__prologue_saves__+0x20>
    201c:	ae 01       	movw	r20, r28
    201e:	4b 5f       	subi	r20, 0xFB	; 251
    2020:	5f 4f       	sbci	r21, 0xFF	; 255
    2022:	fa 01       	movw	r30, r20
    2024:	61 91       	ld	r22, Z+
    2026:	71 91       	ld	r23, Z+
    2028:	af 01       	movw	r20, r30
    202a:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <__iob+0x2>
    202e:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <__iob+0x3>
    2032:	0e 94 2a 0b 	call	0x1654	; 0x1654 <vfprintf>
    2036:	e2 e0       	ldi	r30, 0x02	; 2
    2038:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__epilogue_restores__+0x20>

0000203c <putchar>:
    203c:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <__iob+0x2>
    2040:	70 91 2c 04 	lds	r23, 0x042C	; 0x80042c <__iob+0x3>
    2044:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fputc>
    2048:	08 95       	ret

0000204a <puts>:
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <__iob+0x2>
    2056:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <__iob+0x3>
    205a:	23 81       	ldd	r18, Z+3	; 0x03
    205c:	21 ff       	sbrs	r18, 1
    205e:	1b c0       	rjmp	.+54     	; 0x2096 <puts+0x4c>
    2060:	8c 01       	movw	r16, r24
    2062:	d0 e0       	ldi	r29, 0x00	; 0
    2064:	c0 e0       	ldi	r28, 0x00	; 0
    2066:	f8 01       	movw	r30, r16
    2068:	81 91       	ld	r24, Z+
    206a:	8f 01       	movw	r16, r30
    206c:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <__iob+0x2>
    2070:	70 91 2c 04 	lds	r23, 0x042C	; 0x80042c <__iob+0x3>
    2074:	db 01       	movw	r26, r22
    2076:	18 96       	adiw	r26, 0x08	; 8
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	19 97       	sbiw	r26, 0x09	; 9
    207e:	88 23       	and	r24, r24
    2080:	31 f0       	breq	.+12     	; 0x208e <puts+0x44>
    2082:	09 95       	icall
    2084:	89 2b       	or	r24, r25
    2086:	79 f3       	breq	.-34     	; 0x2066 <puts+0x1c>
    2088:	df ef       	ldi	r29, 0xFF	; 255
    208a:	cf ef       	ldi	r28, 0xFF	; 255
    208c:	ec cf       	rjmp	.-40     	; 0x2066 <puts+0x1c>
    208e:	8a e0       	ldi	r24, 0x0A	; 10
    2090:	09 95       	icall
    2092:	89 2b       	or	r24, r25
    2094:	19 f0       	breq	.+6      	; 0x209c <puts+0x52>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <puts+0x56>
    209c:	8d 2f       	mov	r24, r29
    209e:	9c 2f       	mov	r25, r28
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <sprintf>:
    20aa:	ae e0       	ldi	r26, 0x0E	; 14
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e5       	ldi	r30, 0x5B	; 91
    20b0:	f0 e1       	ldi	r31, 0x10	; 16
    20b2:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__prologue_saves__+0x1c>
    20b6:	0d 89       	ldd	r16, Y+21	; 0x15
    20b8:	1e 89       	ldd	r17, Y+22	; 0x16
    20ba:	86 e0       	ldi	r24, 0x06	; 6
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    20be:	1a 83       	std	Y+2, r17	; 0x02
    20c0:	09 83       	std	Y+1, r16	; 0x01
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f e7       	ldi	r25, 0x7F	; 127
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	ae 01       	movw	r20, r28
    20cc:	47 5e       	subi	r20, 0xE7	; 231
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	6f 89       	ldd	r22, Y+23	; 0x17
    20d2:	78 8d       	ldd	r23, Y+24	; 0x18
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <vfprintf>
    20dc:	ef 81       	ldd	r30, Y+7	; 0x07
    20de:	f8 85       	ldd	r31, Y+8	; 0x08
    20e0:	e0 0f       	add	r30, r16
    20e2:	f1 1f       	adc	r31, r17
    20e4:	10 82       	st	Z, r1
    20e6:	2e 96       	adiw	r28, 0x0e	; 14
    20e8:	e4 e0       	ldi	r30, 0x04	; 4
    20ea:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__epilogue_restores__+0x1c>

000020ee <__ultoa_invert>:
    20ee:	fa 01       	movw	r30, r20
    20f0:	aa 27       	eor	r26, r26
    20f2:	28 30       	cpi	r18, 0x08	; 8
    20f4:	51 f1       	breq	.+84     	; 0x214a <__ultoa_invert+0x5c>
    20f6:	20 31       	cpi	r18, 0x10	; 16
    20f8:	81 f1       	breq	.+96     	; 0x215a <__ultoa_invert+0x6c>
    20fa:	e8 94       	clt
    20fc:	6f 93       	push	r22
    20fe:	6e 7f       	andi	r22, 0xFE	; 254
    2100:	6e 5f       	subi	r22, 0xFE	; 254
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	8f 4f       	sbci	r24, 0xFF	; 255
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	af 4f       	sbci	r26, 0xFF	; 255
    210a:	b1 e0       	ldi	r27, 0x01	; 1
    210c:	3e d0       	rcall	.+124    	; 0x218a <__ultoa_invert+0x9c>
    210e:	b4 e0       	ldi	r27, 0x04	; 4
    2110:	3c d0       	rcall	.+120    	; 0x218a <__ultoa_invert+0x9c>
    2112:	67 0f       	add	r22, r23
    2114:	78 1f       	adc	r23, r24
    2116:	89 1f       	adc	r24, r25
    2118:	9a 1f       	adc	r25, r26
    211a:	a1 1d       	adc	r26, r1
    211c:	68 0f       	add	r22, r24
    211e:	79 1f       	adc	r23, r25
    2120:	8a 1f       	adc	r24, r26
    2122:	91 1d       	adc	r25, r1
    2124:	a1 1d       	adc	r26, r1
    2126:	6a 0f       	add	r22, r26
    2128:	71 1d       	adc	r23, r1
    212a:	81 1d       	adc	r24, r1
    212c:	91 1d       	adc	r25, r1
    212e:	a1 1d       	adc	r26, r1
    2130:	20 d0       	rcall	.+64     	; 0x2172 <__ultoa_invert+0x84>
    2132:	09 f4       	brne	.+2      	; 0x2136 <__ultoa_invert+0x48>
    2134:	68 94       	set
    2136:	3f 91       	pop	r19
    2138:	2a e0       	ldi	r18, 0x0A	; 10
    213a:	26 9f       	mul	r18, r22
    213c:	11 24       	eor	r1, r1
    213e:	30 19       	sub	r19, r0
    2140:	30 5d       	subi	r19, 0xD0	; 208
    2142:	31 93       	st	Z+, r19
    2144:	de f6       	brtc	.-74     	; 0x20fc <__ultoa_invert+0xe>
    2146:	cf 01       	movw	r24, r30
    2148:	08 95       	ret
    214a:	46 2f       	mov	r20, r22
    214c:	47 70       	andi	r20, 0x07	; 7
    214e:	40 5d       	subi	r20, 0xD0	; 208
    2150:	41 93       	st	Z+, r20
    2152:	b3 e0       	ldi	r27, 0x03	; 3
    2154:	0f d0       	rcall	.+30     	; 0x2174 <__ultoa_invert+0x86>
    2156:	c9 f7       	brne	.-14     	; 0x214a <__ultoa_invert+0x5c>
    2158:	f6 cf       	rjmp	.-20     	; 0x2146 <__ultoa_invert+0x58>
    215a:	46 2f       	mov	r20, r22
    215c:	4f 70       	andi	r20, 0x0F	; 15
    215e:	40 5d       	subi	r20, 0xD0	; 208
    2160:	4a 33       	cpi	r20, 0x3A	; 58
    2162:	18 f0       	brcs	.+6      	; 0x216a <__ultoa_invert+0x7c>
    2164:	49 5d       	subi	r20, 0xD9	; 217
    2166:	31 fd       	sbrc	r19, 1
    2168:	40 52       	subi	r20, 0x20	; 32
    216a:	41 93       	st	Z+, r20
    216c:	02 d0       	rcall	.+4      	; 0x2172 <__ultoa_invert+0x84>
    216e:	a9 f7       	brne	.-22     	; 0x215a <__ultoa_invert+0x6c>
    2170:	ea cf       	rjmp	.-44     	; 0x2146 <__ultoa_invert+0x58>
    2172:	b4 e0       	ldi	r27, 0x04	; 4
    2174:	a6 95       	lsr	r26
    2176:	97 95       	ror	r25
    2178:	87 95       	ror	r24
    217a:	77 95       	ror	r23
    217c:	67 95       	ror	r22
    217e:	ba 95       	dec	r27
    2180:	c9 f7       	brne	.-14     	; 0x2174 <__ultoa_invert+0x86>
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	61 05       	cpc	r22, r1
    2186:	71 05       	cpc	r23, r1
    2188:	08 95       	ret
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
    218e:	0a 2e       	mov	r0, r26
    2190:	06 94       	lsr	r0
    2192:	57 95       	ror	r21
    2194:	47 95       	ror	r20
    2196:	37 95       	ror	r19
    2198:	27 95       	ror	r18
    219a:	ba 95       	dec	r27
    219c:	c9 f7       	brne	.-14     	; 0x2190 <__ultoa_invert+0xa2>
    219e:	62 0f       	add	r22, r18
    21a0:	73 1f       	adc	r23, r19
    21a2:	84 1f       	adc	r24, r20
    21a4:	95 1f       	adc	r25, r21
    21a6:	a0 1d       	adc	r26, r0
    21a8:	08 95       	ret

000021aa <_exit>:
    21aa:	f8 94       	cli

000021ac <__stop_program>:
    21ac:	ff cf       	rjmp	.-2      	; 0x21ac <__stop_program>
